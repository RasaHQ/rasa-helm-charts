# Default values for studio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

############################
# THIS IS WORK IN PROGRESS #
############################

# -- (string) Override name of app
nameOverride: ""
# -- (string) Override the full qualified app name
fullnameOverride: ""

# -- imagePullSecret defines repository pull secrets
imagePullSecrets:
  []
  # - name: regcred

# -- studioEnabled defines if Studio will be deployed
## Disable this in case you only want to deploy MTS/MRS
studioEnabled: true

# -- repository specifies image repository for Studio
repository: "europe-west3-docker.pkg.dev/rasa-releases/studio/"
# -- tag specifies image tag for Studio
## Overrides the image tag whose default is the chart appVersion.
tag: "1.0.2"

# Studio Backend component specific configuration
backend:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-backend"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- backend.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- The URL of the database to connect to in the format postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public
    DATABASE_URL:
      secret:
        name: "studio-secrets"
        key: "DATABASE_URL"
    KEYCLOAK_REALM:
      value: "rasa-studio"
    KEYCLOAK_API_CLIENT_ID:
      value: "admin-cli"
    # -- We recommend changing this default value. These credentials are used by Studio Backend Server to communicate with Keycloak’s user management module
    KEYCLOAK_API_USERNAME:
      value: "realmadmin"
    # -- We recommend changing this default value. These credentials are used by Studio Backend Server to communicate with Keycloak’s user management module
    KEYCLOAK_API_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KEYCLOAK_API_PASSWORD"
    KEYCLOAK_ADMIN_USERNAME:
      value: "kcadmin"
    # -- The password for the Keycloak admin user. This credential is used to manage users and clients in Keycloak.
    KEYCLOAK_ADMIN_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KEYCLOAK_ADMIN_PASSWORD"
    KEYCLOAK_API_GRANT_TYPE:
      value: "password"
    # -- The host of the web application.
    WEB_CLIENT_URL:
      value: ""
    # -- The complete registry URL of the RASA Pro docker image used for training
    DOCKER_IMAGE_TAG:
      value: ""

  # -- backend.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- backend.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- backend.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-backend: runtime/default

  # -- backend.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- backend.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
      - ALL
      add: ['NET_BIND_SERVICE','NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 4000

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /api/health
      port: 4000
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /api/health
      port: 4000
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Define Studio Database Migration job settings
  migration:
    # -- migration.enable specifies whether a database migration job should be created
    enable: true
    # -- migration.image specifies which image database migration job should use
    image:
      # -- image.name specifies the repository of the image
      name: "studio-database-migration"
      # -- image.pullPolicy specifies image pull policy
      pullPolicy: IfNotPresent

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- Specifies the hosts for this ingress. Make sure you provide a valid host name. We recommend setting the same host for all ingress objects
    hosts:
      - host: chart-example.local
        paths:
          - path: /api
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- backend.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- backend.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- backend.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- backend.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- backend.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Web Client component specific configuration
webClient:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-web-client"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- webClient.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- # -- This is your load_balancer or host_name URL to which you plan to deploy Studio with /api suffixed. For example http://rasa-studio.dev.io/api
    API_ENDPOINT: ""
    # -- This is your load_balancer or host_name URL to which you plan to deploy Studio with /auth suffixed. For example http://rasa-studio.dev.io/auth
    KEYCLOAK_URL: ""
    KEYCLOAK_REALM: "rasa-studio"
    KEYCLOAK_CLIENT_ID: "rasa-studio-backend"

  # -- webClient.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- webClient.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- webClient.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-web-client: runtime/default

  # -- webClient.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- webClient.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
      - ALL
      add: ['NET_BIND_SERVICE','NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 80

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- Specifies the hosts for this ingress. Make sure you provide a valid host name. We recommend setting the same host for all ingress objects
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- webClient.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- webClient.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- webClient.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- webClient.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Event Ingestion component specific configuration
eventIngestion:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-event-ingestion"
      # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- eventIngestion.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- The URL of the database to connect to in the format postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public. This should be same as the one defined for backend.
    DATABASE_URL:
      secret:
        name: "studio-secrets"
        key: "DATABASE_URL"
    # -- Set to true if you want to use SSL
    KAFKA_ENABLE_SSL:
      value: ""
    # -- Set to true if you want to use SSL with custom certs
    KAFKA_CUSTOM_SSL:
      value: ""
    # -- Path to the CA file
    KAFKA_CA_FILE:
      value: ""
    # -- Path to the client key file
    KAFKA_KEY_FILE:
      value: ""
    # -- Path to the client certificate file
    KAFKA_CERT_FILE:
      value: ""
    # -- Defaults to true, the server certificate is verified against the list of supplied CA
    KAFKA_REJECT_UNAUTHORIZED:
      value: ""
    # -- Instructs the application to allow untrusted certificates. Set this to 0 if using untrusted certificates for Kafka.
    NODE_TLS_REJECT_UNAUTHORIZED:
      value: ""
    # -- Supported values are plain, scram-sha-256 or scram-sha-512. You can leave it empty if you are not using SASL.
    KAFKA_SASL_MECHANISM:
      value: ""
    KAFKA_SASL_USERNAME:
      value: ""
    KAFKA_SASL_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KAFKA_SASL_PASSWORD"
    # -- Kafka broker address
    KAFKA_BROKER_ADDRESS:
      value: ""
    # -- Kafka topic to which to Rasa Pro assistant will publish events. Make sure that you pre-create these on your own.
    KAFKA_TOPIC:
      value: "rasa-events"
    # -- Kafka topic to which unprocessed Rasa Pro assistant events will be pushed by Studio. Make sure that you pre-create these on your own.
    KAFKA_DLQ_TOPIC:
      value: "rasa-events-dlq"
    # -- Kafka internal client id. Please do not change this value.
    KAFKA_CLIENT_ID:
      value: "kafka-python-rasa"
    # -- This is the Kafka group id that should be unique for Studio so that Studio can receive a copy of all the Rasa Pro events streamed to the topic.
    KAFKA_GROUP_ID:
      value: ""

  # -- eventIngestion.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- eventIngestion.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- eventIngestion.volumes specify additional volumes for the Studio event ingestion container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes:
    []
    # - hostPath:
    #   path: <HOST_PATH>
    #   name: <VOLUME_NAME>

  # -- eventIngestion.volumeMounts specifies additional volumes to mount in the Studio event ingestion container
  volumeMounts:
    []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- eventIngestion.podAnnotations defines to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-event-ingestion: runtime/default

  # -- eventIngestion.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- eventIngestion.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
      - ALL
      add: ['NET_BIND_SERVICE','NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- eventIngestion.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- eventIngestion.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- eventIngestion.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- eventIngestion.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- eventIngestion.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Keycloak component specific configuration
keycloak:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-keycloak"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- keycloak.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- Database URL for storing user and RBAC data used by Keycloak. The connection string should be of the format jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}. Please note that if you are using pgbouncer in your database cluster the transaction pool mode is not compatible with Keycloak. Instead, use the session mode.
    KC_DB_URL:
      value: ""
    # -- Admin user name to for Keycloak admin interface. This is the user that you can use to create/modify users for Studio
    KEYCLOAK_ADMIN:
      value: "kcadmin"
    # -- The password for the Keycloak admin user. This credential is used to manage users and clients in Keycloak.
    KEYCLOAK_ADMIN_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KEYCLOAK_ADMIN_PASSWORD"
    # -- Keycloak database username
    KC_DB_USERNAME:
      value: ""
    # -- Keycloak database password
    KC_DB_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KC_DB_PASSWORD"
    # Use SSL for Keycloak database connection used during db migration
    KC_DB_SSL:
      value: "true"
    # If true the server will reject db connection which is not authorized with the list of supplied CAs.
    KC_REJECT_UNAUTHORIZED:
      value: ""
    # Set value to edge to enable communication through HTTP between the proxy/load balancer and Keycloak. Useful for highly secure internal network where the reverse proxy keeps a secure connection (HTTP over TLS) with clients while communicating with Keycloak using HTTP.
    KC_PROXY:
      value: "edge"

  # -- keycloak.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- keycloak.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- keycloak.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-keycloak: runtime/default

  # -- keycloak.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- keycloak.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
      - ALL
      add: ['NET_BIND_SERVICE','NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 8080

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /auth
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /auth
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- Specifies the hosts for this ingress. Make sure you provide a valid host name. We recommend setting the same host for all ingress objects
    hosts:
      - host: chart-example.local
        paths:
          - path: /auth
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- keycloak.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi

  # -- keycloak.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- keycloak.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- keycloak.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Model training and running service specific configuration
modelService:
  # -- GCP credentials for the service account. The secretKey is the base64 encoded service account JSON. This is only required if you are using GCS for object storage.
  gcpCredentials:
    secretName:
    secretKey:

  # -- modelService.runsInCluster describes if service is run inside cluster or not.
  ## It is used during the initialization procedure or API clients which communicate with K8S API.
  runsInCluster: true

  rasaProLicense:
    # -- rasaProLicense.secretName defines the name of the secret under which Rasa Pro License is stored.
    secretName: "studio-secrets"
    # -- rasaProLicense.secretKey defines the key in the K8s under which Rasa Pro License is stored.
    secretKey: "RASA_PRO_LICENSE_SECRET_KEY"

  openAiKey:
    # -- openAiKey.secretName defines the name of the secret under which OpenAI API key is stored.
    secretName: "studio-secrets"
    # -- openAiKey.secretKey defines the Key in the K8s under which OpenAI API key is stored in K8s secret.
    secretKey: "OPENAI_API_KEY_SECRET_KEY"

  kafka:
    # -- kafka.brokerAddress is the URL of the Kafka broker to which to connect to.
    brokerAddress: ""
    # -- kafka.securityProtocol defines security protocol used to connect to Kafka broker.
    ## Values: PLAINTEXT, SASL_PLAINTEXT, SSL, SASL_SSL
    securityProtocol: "SASL_SSL"
    # -- kafka.saslMechanism defines Kafka SASL mechanism used to connect to Kafka Broker.
    ## Values: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512
    saslMechanism: "SCRAM-SHA-256"
    # -- kafka.saslUsername is a username used to connect to Kafka broker which has SASL authentication method enabled.
    saslUsername: ""
    # -- kafka.saslPassword is a password used to connect to Kafka broker which has SASL authentication method enabled.
    saslPassword:
      secretName: "studio-secrets"
      secretKey: "KAFKA_SASL_PASSWORD"
    # -- kafka.sslCaLocation defines location from which CA certs should be read. Used when SSL security is enabled (SSL, SASL_SSL).
    sslCaLocation: ""

  # Model Training Service specific configuration
  training:
    enabled: true

    # -- Define service account
    serviceAccount:
      # -- serviceAccount.create specifies whether a service account should be created
      create: true
      # -- serviceAccount.annotations defines annotations to add to the service account
      annotations: {}
      # -- serviceAccount.name defines the name of the service account to use.
      ## If not set and create is true, a name is generated using the fullname template
      name: ""

    orchestrator:
      # -- orchestrator.replicaCount specifies number of replicas
      replicaCount: 1
      # Define image settings
      image:
        # -- Specifies image repository
        repository: "europe-west3-docker.pkg.dev/rasa-releases/model-training-and-running-services/"
        # -- Specifies image name
        name: "model-training-orchestrator"
        # -- Specifies image tag
        tag: "3.2.2"
        # -- Specifies image pull policy
        pullPolicy: IfNotPresent

      # -- orchestrator.environmentVariables defines environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        TRAINING_RESULT_TOPIC:
          value: "training-result"
        TRAINING_RESULT_CONSUMER_GROUP_ID:
          value: "training-result-consumer-group"
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        TRAINING_JOB_TOPIC:
          value: "training-job"
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        KAFKA_TRAINING_STATUS_UPDATE_TOPIC:
          value: "training-status-update"
        # -- use "gcs" for Google Cloud Storage, "aws_s3" for AWS S3
        STORAGE_TYPE:
          value: ""
        # -- Name of the storage bucket. Make sure to pre-create this bucket. This bucket is the same one used for BUCKET_NAME variable
        TRAINING_STORAGE_BUCKET:
          value: ""
        # -- Studio supports only postgres as a database backend
        PERSISTOR_BACKEND:
          value: "postgres"
        # -- The URL of the database host
        POSTGRES_HOST:
          value: ""
        # -- The port of the database host
        POSTGRES_PORT:
          value: ""
        # -- The name of the database. This should be different from the one used for "backend" and "eventIngestion" pods. Please make sure to pre-create this database.
        POSTGRES_DATABASE:
          value: ""
        # -- The username of the database user
        POSTGRES_USERNAME:
          value: ""
        # -- The password of the database user
        POSTGRES_PASSWORD:
          secret:
            name: "studio-secrets"
            key: "MODEL_SERVICE_DB_PASSWORD"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_ACCESS_KEY_ID:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_ACCESS_KEY_ID"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_SECRET_ACCESS_KEY:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_SECRET_ACCESS_KEY"
        # -- Needed if STORAGE_TYPE is set to aws_s3. The region where the bucket is located.
        # REGION_NAME:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The project ID of the GCP project.
        # GOOGLE_CLOUD_PROJECT:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The zone where the bucket is located.
        # CLOUDSDK_COMPUTE_ZONE:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The service account email address.
        # TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
        #   secret:
        #     name: "studio-secrets"
        #     key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- orchestrator.envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- orchestrator.volumes specifies additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- orchestrator.volumeMounts specifies additional volumes to mount
      volumeMounts:
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- orchestrator.additionalContainers allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- orchestrator.podAnnotations defines annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-training-service-orchestrator: runtime/default

      # -- orchestrator.podSecurityContext defines pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- orchestrator.securityContext defines security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
          add: ['NET_BIND_SERVICE','NET_RAW']
        # privileged: false
        # readOnlyRootFilesystem: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Define service
      service:
        # -- service.type specifies service type
        ## Use `NodePort` if using GCP ingress controller, in ALL other cases keep `ClusterIP`.
        type: ClusterIP
        # -- service.port specifies service port
        port: 8000
        # -- service.targetPort specifies service target port
        targetPort: 8000

      # -- Override default liveness probe settings
      livenessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Override default readiness probe settings
      readinessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- orchestrator.ingress configures the ingress resource.
      ## ref: http://kubernetes.io/docs/user-guide/ingress/
      ingress:
        # -- Specifies whether an ingress service should be created. An ingress for this service is not mandatory.
        enabled: false
        # -- ingress.className specifies the ingress className to be used
        className: ""
        # -- ingress.labels defines labels to add to the ingress
        labels: {}
        # -- ingress.annotations defines annotations to add to the ingress
        annotations:
          {}
          # kubernetes.io/ingress.class: nginx
          # kubernetes.io/tls-acme: "true"
        # -- ingress.hosts specifies the hosts for this ingress
        hosts:
          - host: chart-example.local
            paths:
              - path: /
                pathType: Prefix
            extraPaths: []
        # -- ingress.tls spefices the TLS configuration for ingress
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local

      # -- orchestrator.resources specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- orchestrator.nodeSelector allows the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- orchestrator.tolerations defines tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- orchestrator.affinity allows the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    consumer:
      # -- consumer.replicaCount specifies number of replicas
      replicaCount: 1
      # Define image settings
      image:
        # -- Specifies image repository
        repository: "europe-west3-docker.pkg.dev/rasa-releases/model-training-and-running-services"
        # -- Specifies image name
        name: "model-training-job-consumer"
        # -- Specifies image tag
        tag: "3.2.2"
        # -- Specifies image pull policy
        pullPolicy: IfNotPresent

      # -- consumer.environmentVariables defines environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        KAFKA_JOB_TOPIC:
          value: "training-job"
        MODEL_TRAINING_KAFKA_CONSUMER_ID:
          value: "training-result-consumer-group"
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        KAFKA_RESULT_TOPIC:
          value: "training-result"
        # -- use "gcs" for Google Cloud Storage, "aws_s3" for AWS S3
        STORAGE_TYPE:
          value: ""
        # -- Name of the storage bucket. Make sure to pre-create this bucket.  This bucket is the same one used for TRAINING_STORAGE_BUCKET variable
        BUCKET_NAME:
          value: ""
        KUBERNETES_BASE_TRAINING_DATA_PATH:
          value: "/home"
        KUBERNETES_JOB_BOT_CONFIG_MOUNT:
          value: "/app"
        # -- Value of CPU limit to allocate to the container for model training
        RASA_REQUESTS_CPU:
          value: "1000m"
        # -- Value of Memory limit to allocate to the container for model training
        RASA_REQUESTS_MEMORY:
          value: "1Gi"
        # -- Value of CPU limit to allocate to the container for model training
        RASA_LIMITS_CPU:
          value: "1000m"
        # -- Value of Memory limit to allocate to the container for model training
        RASA_LIMITS_MEMORY:
          value: "1Gi"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_ACCESS_KEY_ID:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_ACCESS_KEY_ID"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_SECRET_ACCESS_KEY:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_SECRET_ACCESS_KEY"
        # -- Needed if STORAGE_TYPE is set to aws_s3. The region where the bucket is located.
        # REGION_NAME:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The project ID of the GCP project.
        # GOOGLE_CLOUD_PROJECT:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The zone where the bucket is located.
        # CLOUDSDK_COMPUTE_ZONE:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The service account email address.
        # TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
        #   secret:
        #     name: "studio-secrets"
        #     key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- consumer.envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- consumer.volumes specifies additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- consumer.volumeMounts specifies additional volumes to mount
      volumeMounts:
        []
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- consumer.additionalContainers allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- consumer.annotations defines annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-training-service-consumer: runtime/default

      # -- consumer.podSecurityContext defines pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- consumer.securityContext defines security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
          add: ['NET_BIND_SERVICE','NET_RAW']
        # privileged: false
        # readOnlyRootFilesystem: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- consumer.resources specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- consumer.nodeSelector allows the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- consumer.tolerations defines tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- consumer.affinity allows the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

  # Model Running Servic specific configuration
  running:
    enabled: true

    # -- Define service account
    serviceAccount:
      # -- serviceAccount.create specifies whether a service account should be created
      create: true
      # -- serviceAccount.annotations defines annotations to add to the service account
      annotations: {}
      # -- serviceAccount.name defines the name of the service account to use.
      ## If not set and create is true, a name is generated using the fullname template
      name: ""

    orchestrator:
      # -- orchestrator.replicaCount specifies number of replicas
      replicaCount: 1
      # Define image settings
      image:
        # -- Specifies image repository
        repository: "europe-west3-docker.pkg.dev/rasa-releases/model-training-and-running-services/"
        # -- Specifies image name
        name: "model-running-orchestrator"
        # -- Specifies image tag
        tag: "3.2.2"
        # -- Specifies image pull policy
        pullPolicy: IfNotPresent

      # -- orchestrator.environmentVariables defines environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        DEPLOYMENT_RESULT_TOPIC:
          value: "deployment-result"
        DEPLOYMENT_RESULT_CONSUMER_GROUP_ID:
          value: "deployment-result-consumer-group"
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        DEPLOYMENT_JOB_TOPIC:
          value: "deployment-job"
        # -- use "gcs" for Google Cloud Storage, "aws_s3" for AWS S3
        STORAGE_TYPE:
          value: ""
        # -- Name of the storage bucket. Make sure to pre-create this bucket. This bucket is the same one used for BUCKET_NAME variable
        DEPLOYMENT_STORAGE_BUCKET:
          value: ""
        # -- Studio supports only postgres as a database backend
        PERSISTOR_BACKEND:
          value: "postgres"
        # -- The URL of the database host
        POSTGRES_HOST:
          value: ""
        # -- The port of the database host
        POSTGRES_PORT:
          value: ""
        # -- The name of the database. This should be different from the one used for "backend" and "eventIngestion" pods. Please make sure to pre-create this database.
        POSTGRES_DATABASE:
          value: ""
        # -- The username of the database user
        POSTGRES_USERNAME:
          value: ""
        # -- The password of the database user
        POSTGRES_PASSWORD:
          secret:
            name: "studio-secrets"
            key: "MODEL_SERVICE_DB_PASSWORD"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_ACCESS_KEY_ID:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_ACCESS_KEY_ID"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_SECRET_ACCESS_KEY:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_SECRET_ACCESS_KEY"
        # -- Needed if STORAGE_TYPE is set to aws_s3. The region where the bucket is located.
        # REGION_NAME:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The project ID of the GCP project.
        # GOOGLE_CLOUD_PROJECT:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The zone where the bucket is located.
        # CLOUDSDK_COMPUTE_ZONE:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The service account email address.
        # DEPLOYMENT_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
        #   secret:
        #     name: "studio-secrets"
        #     key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- orchestrator.envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- orchestrator.volumes specifies additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- orchestrator.volumeMounts specifies additional volumes to mount
      volumeMounts:
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- orchestrator.additionalContainers allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- orchestrator.podAnnotations defines annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-running-service-orchestrator: runtime/default

      # -- orchestrator.podSecurityContext defines pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- orchestrator.securityContext defines security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
          add: ['NET_BIND_SERVICE','NET_RAW']
        # privileged: false
        # readOnlyRootFilesystem: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Define service
      service:
        # -- service.type specifies service type
        ## Use `NodePort` if using GCP ingress controller, in ALL other cases keep `ClusterIP`.
        type: ClusterIP
        # -- service.port specifies service port
        port: 8001
        # -- service.targetPort specifies service target port
        targetPort: 8001

      # -- Override default liveness probe settings
      livenessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Override default readiness probe settings
      readinessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- orchestrator.ingress configures the ingress resource.
      ## ref: http://kubernetes.io/docs/user-guide/ingress/
      ingress:
        # -- ingress.enabled specifies whether an ingress service should be created
        enabled: true
        # -- ingress.className specifies the ingress className to be used
        className: ""
        # -- ingress.labels defines labels to add to the ingress
        labels: {}
        # -- ingress.annotations defines annotations to add to the ingress
        annotations:
          {}
          # kubernetes.io/ingress.class: nginx
          # kubernetes.io/tls-acme: "true"
        # -- Specifies the hosts for this ingress. Make sure you provide a valid host name. We recommend setting the same host for all ingress objects
        hosts:
          - host: chart-example.local
            extraPaths: []
        # -- Spefices the TLS configuration for ingress
        # tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local

      # -- orchestrator.resources specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- orchestrator.nodeSelector allows the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- orchestrator.tolerations defines tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- orchestrator.affinity allows the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    consumer:
      # -- consumer.replicaCount specifies number of replicas
      replicaCount: 1
      # Define image settings
      image:
        # -- Specifies image repository
        repository: "europe-west3-docker.pkg.dev/rasa-releases/model-training-and-running-services/"
        # -- Specifies image name
        name: "model-running-job-consumer"
        # -- Specifies image tag
        tag: "3.2.2"
        # -- Specifies image pull policy
        pullPolicy: IfNotPresent

      # -- consumer.environmentVariables defines environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        DEPLOYMENT_JOB_KAFKA_TOPIC:
          value: "deployment-job"
        MODEL_DEPLOYMENT_KAFKA_CONSUMER_ID:
          value: "deployment-result-consumer-group"
        # -- Kafka topic for internal service communication. Please make sure to pre-create this topic.
        KAFKA_DEPLOYMENT_RESULT_TOPIC:
          value: "deployment-result"
        # -- use "gcs" for Google Cloud Storage, "aws_s3" for AWS S3
        STORAGE_TYPE:
          value: ""
        # -- Name of the storage bucket. Make sure to pre-create this bucket. This bucket is the same one used for TRAINING_STORAGE_BUCKET variable
        BUCKET_NAME:
          value: ""
        # -- Domain name of the deployment which is mapped to ingress resource. Example: "http://my-domain.com"
        BASE_DOMAIN:
          value: ""
        BOT_TALK_SUB_PATH:
          value: "talk"
        KUBERNETES_BASE_BOT_DATA_PATH:
          value: "/home"
        KUBERNETES_JOB_BOT_CONFIG_MOUNT:
          value: "/app"
        RASA_REQUESTS_CPU:
          value: "1000m"
        # -- Value of Memory limit to allocate to the container for model training
        RASA_REQUESTS_MEMORY:
          value: "1Gi"
        # -- Value of CPU limit to allocate to the container for model training
        RASA_LIMITS_CPU:
          value: "1000m"
        # -- Value of Memory limit to allocate to the container for model training
        RASA_LIMITS_MEMORY:
          value: "1Gi"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_ACCESS_KEY_ID:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_ACCESS_KEY_ID"
        # -- Needed if STORAGE_TYPE is set to aws_s3
        # AWS_SECRET_ACCESS_KEY:
        #   secret:
        #     name: "studio-secrets"
        #     key: "AWS_SECRET_ACCESS_KEY"
        # -- Needed if STORAGE_TYPE is set to aws_s3. The region where the bucket is located.
        # REGION_NAME:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The project ID of the GCP project.
        # GOOGLE_CLOUD_PROJECT:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The zone where the bucket is located.
        # CLOUDSDK_COMPUTE_ZONE:
        #   value: ""
        # -- Needed if STORAGE_TYPE is set to gcs. The service account email address.
        # DEPLOYMENT_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
        #   secret:
        #     name: "studio-secrets"
        #     key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- consumer.envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- consumer.volumes specifies additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- consumer.volumeMounts specifies additional volumes to mount
      volumeMounts:
        []
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- consumer.additionalContainers allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- consumer.annotations defines annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-running-service-consumer: runtime/default

      # -- consumer.podSecurityContext defines pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- consumer.securityContext defines security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
          add: ['NET_BIND_SERVICE','NET_RAW']
        # privileged: false
        # readOnlyRootFilesystem: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      rasaReadinessProbe:
        # -- rasaReadinessProbe.initialDelaySeconds is initial delay after which readiness probe will be run on the container which is running Rasa deployment.
        ## Readiness check assess if Rasa is ready to serve requests.
        initialDelaySeconds: 10
        # -- rasaReadinessProbe.intervalInSeconds interval (in seconds) on which readiness check will be performed.
        intervalInSeconds: 5
        # -- rasaReadinessProbe.failureThreshold is allowed number of failed readiness checks until Rasa container inside the pod is considered unreachable and unable to serve requests.
        ## Total possible readiness check = initial delay + check interval x failure threshold
        failureThreshold: 50

      rasaStartupProbe:
        # -- rasaStartupProbe.initialDelaySeconds is initial delay after which startup probe will be run on the container which is running Rasa deployment.
        ## Readiness check assess if Rasa application is ready.
        initialDelaySeconds: 10
        # -- rasaStartupProbe.intervalInSeconds is interval (in seconds) on which startup check will be performed.
        intervalInSeconds: 5
        # -- rasaStartupProbe.failureThreshold is allowed number of failed startup checks until Rasa app inside the container is considered not started.
        ## Total possible startup check = initial delay + check interval x failure threshold
        failureThreshold: 50

      # -- consumer.resources specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- consumer.nodeSelector allows the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- consumer.tolerations defines tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- consumer.affinity allows the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    proxy:
      # -- proxy.replicaCount specifies number of replicas
      replicaCount: 1
      # -- proxy.image defines image settings
      image: "nginx:1.25-alpine"
      # -- proxy.pullPolicy specifies image pull policy
      pullPolicy: IfNotPresent
      # proxy.botTalkSubPath defines the path to talk to your bot
      botTalkSubPath: "/talk"

      # -- Define service
      service:
        # -- service.type specifies service type
        type: ClusterIP
        # -- service.port specifies service port
        port: 80
        # -- service.targetPort specifies service target port
        targetPort: 80

      # -- proxy.podAnnotations defines annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/nginx-reverse-proxy: runtime/default

      # -- proxy.podSecurityContext defines pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- proxy.securityContext defines security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
          add: ['NET_BIND_SERVICE','NET_RAW']
        # privileged: false
        # readOnlyRootFilesystem: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Override default liveness probe settings
      livenessProbe:
        enabled: true
        httpGet:
          path: /healthz
          port: 80
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Override default readiness probe settings
      readinessProbe:
        enabled: true
        httpGet:
          path: /healthz
          port: 80
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- proxy.resources specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

  persistence:
    # -- Should the PV and PVC be created
    create: true
    # -- Type of the volume that will be used to store the training data
    # Valid values: local, nfs. Leave this empty if you are using AWS EFS.
    type: ""
    # -- If you are deploying to AWS and using EFS for volume, set this value to true.
    aws: true
    # -- FileSystemId::MountPoint of the AWS EFS volume. For example "fs-0bbaea252301ca2d4::fsap-0b4550cc4c77377fd"
    efs_id: ""
    # -- Storage Class name for PV. Should be `efs-sc` if you are using AWS EFS. It's "standard-rwo" if you are using NFS server.
    storageClassName: ""
    # -- Storage Capacity for PV
    storageCapacity: 1Gi
    # -- Storage requests for PVC
    storageRequests: 1Gi
    # -- DNS name or IP address of the NFS server. This value is used only when type is set to nfs
    nfsServer: ""
    # -- Directory from the host machine that will be mounted to the container for training data. This value is used only when type is set to local
    hostPath: ""
    # -- Node on which the PV will be created
    # This value is used only when type is set to local
    localNodeName: ""

# Network policy settings
networkPolicy:
  # -- networkPolicy.enabled specifies whether to enable network policies
  enabled: false
  # -- networkPolicy.denyAll defines whether to apply denyAll network policy
  denyAll: false
  # -- networkPolicy.nodeCIDR allows for traffic from a given CIDR - it's required in order to make kubelet able to run live and readiness probes
  nodeCIDR: []
  #  - ipBlock:
  #      cidr: 0.0.0.0/0

global:
  # -- global.additionalDeploymentLabels can be used to map organizational structures onto system objects
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  additionalDeploymentLabels: {}

# -- Controls whether the pod may use the node network namespace
hostNetwork: false

# -- dnsPolicy specifies Pod's DNS policy
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
dnsPolicy: ""

# -- dnsConfig specifies Pod's DNS condig
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig:
  {}
  # options:
  # - name: ndots
  #   value: "1"

# -- deploymentAnnotations defines annotations to add to all Studio deployments
deploymentAnnotations:
  {}
  #  key: "value"

# -- deploymentLabels defines labels to add to all Studio deployment
deploymentLabels: {}

# -- podLabels defines labels to add to all Studio pod(s)
podLabels: {}
