# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- nameOverride overrides name of the app
nameOverride: ""
# -- fullnameOverride overrides the full qualified app name
fullnameOverride: ""

# -- imagePullSecrets is used for private repository pull secrets
imagePullSecrets: []
  # - name: regcred

# -- rasaProLicense is license key for Rasa Pro Services.
rasaProLicense:
  secretName: "rasa-secrets"
  secretKey: "rasaProLicense"

# Rasa Pro Image
rasa:
  # -- rasa.enabled enables Rasa Plus deployment
  # Disable this if you want to deploy ONLY Rasa Pro Services
  enabled: true

  # -- rasa.replicaCount specifies number of replicas
  replicaCount: 1
  # rasa.image defines image settings
  image:
    # -- image.repository specifies image repository
    repository: "europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pro"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent
    # -- image.tag specifies image tag
    tag: "3.8.10-latest"

  # -- rasa.strategy specifies deployment strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  #   type: RollingUpdate
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0

  settings:
    # -- settings.debugMode enables debug mode
    debugMode: false
    # -- settings.port defines port on which Rasa runs
    port: 5005
    # -- settings.scheme defines scheme by which the service are accessible
    scheme: http
    # -- settings.enableApi start the web server API in addition to the input channel
    # Rasa API supports two authentication methods, Token based Auth or JWT
    # Enter details in token or (jwtSecret, jwtMethod) to enable either of them
    enableApi: true
    # -- settings.authToken is token Rasa accepts as authentication token from other Rasa services
    authToken:
      secretName: "rasa-secrets"
      secretKey: "authToken"
    # -- settings.jwtSecret is JWT token Rasa accepts as authentication token from other Rasa services
    jwtSecret:
      secretName: "rasa-secrets"
      secretKey: "jwtSecret"
    # -- settings.jwtMethod is JWT algorithm to be used
    jwtMethod: HS256
    # -- settings.cors is CORS for the passed origin. Default is * to allow all origins
    cors: '*'
    # -- settings.useDefaultArgs is to disable default startup args to be able to be used by Studio. There is no need to ever disable this in Rasa Pro case.
    useDefaultArgs: true
    # -- settings.mountVolumes is a flag to disable mounting of credentials.yml and endpoints.yml to the Rasa Pro deployment.
    mountDefaultConfigmap: true
    # settings.credentials enables credentials configuration for channel connectors
    credentials:
      # -- credentials.enabled enables credentials configuration for channel connectors
      enabled: false
      # -- credentials.additionalChannelCredentials defines credentials which should be used by Rasa to connect to various
      # input channels
      ## See: https://rasa.com/docs/rasa/messaging-and-voice-channels
      additionalChannelCredentials: {}
      #  rest:
      #  facebook:
      #    verify: "rasa"
      #    secret: "<SECRET>"
      #    page-access-token: "<PAGE-ACCESS-TOKEN>"

    # See: https://rasa.com/docs/rasa/telemetry/telemetry/
    telemetry:
      # -- telemetry.enabled allow Rasa to collect anonymous usage details
      enabled: true
      # -- telemetry.debug prints telemetry data to stdout
      debug: false

    # Not all parameters are mandatory
    endpoints:
      # -- endpoints.models provides loading models from the storage
      # See: https://rasa.com/docs/rasa/model-storage
      models:
        enabled: false
        # url: ""
        # waitTimeBetweenPulls: 20
      # -- endpoints.trackerStore assistant's conversations are stored within a tracker store
      # See: https://rasa.com/docs/rasa/tracker-stores
      trackerStore:
        enabled: false
        # type: "dynamo"
        # dialect: ""
        # url: ""
        # db: 0
        # password: ""
        # username: ""
        # query: ""
      # -- endpoints.lockStore makes lock mechanism to ensure that incoming messages for a given conversation ID are processed in the right order
      # See: https://rasa.com/docs/rasa/lock-stores
      lockStore:
        enabled: false
        useConcurrent: true
        url: ""
        # port: ""
        # password: ""
        # db: "1"
        # key_prefix: ""
        # use_ssl: false
        # socket_timeout: ""
      # -- endpoints.eventBroker allows you to connect your running assistant to other services that process the data
      # See: https://rasa.com/docs/rasa/event-brokers
      eventBroker:
        enabled: false
        # type: ""
        # url: ""
        # username: ""
        # password: ""
        # port: ""
        # queues:
        #   - rasa_production_events
        # exchangeName: exchange
      # -- endpoints.tracing tracks requests as they flow through a distributed system
      # See: https://rasa.com/docs/rasa/monitoring/tracing/
      tracing:
        enabled: false
        # type: jaeger
        # host: localhost
        # port: 6831
        # service_name: rasa
        # sync_export: ~
        # endpoint: my-otlp-host:4318
        # insecure: false
        # root_certificates: ./tests/unit/tracing/fixtures/ca.pem
      actionEndpoint:
        url: /webhook
      # -- `endpoints.additionalEndpoints` to add more settings to `endpoints.yml`
      additionalEndpoints: {}

    # -- settings.environment: development or production
    environment: development
    # settings.logging sets log levels for Rasa and external libraries
    # See: https://rasa.com/docs/rasa/next/command-line-interface/#log-level
    logging:
      # -- logging.logLevel is Rasa Log Level
      logLevel: info
    # -- settings.ducklingHttpUrl is HTTP URL to the duckling service
    ducklingHttpUrl:

  # -- rasa.args overrides the default arguments for the container
  args: []
  # -- rasa.additionalArgs adds additional arguments to the default args
  additionalArgs: []
  # -- rasa.command overrides the default command for the container
  command: []
  # -- rasa.overrideEnv overrides all default environment variables
  overrideEnv: []
  # -- rasa.additionalEnv adds additional environment variables
  additionalEnv: []
    # - name: SOME_CUSTOM_ENV_VAR
    #   value: "custom value"
    # - name: SOME_CUSTOM_ENV_VAR_FROM_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name:
    #       key:

  # -- rasa.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom: []
    # - configMapRef:
    #     name: my-configmap

  # -- rasa.initContainers allows to specify init containers for the Rasa deployment
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## <PATH_TO_INITIAL_MODEL> has to be a URL (without auth) that points to a tar.gz file
  initContainers: []
    # - name: initial-model
    #   image: "alpine"
    #   command: ["/bin/sh", "-c"]
    #   args:
    #     - cd /app/models/ && wget <PATH_TO_INITIAL_MODEL> -O model.tar.gz
    #   volumeMounts:
    #     - mountPath: /app/models
    #       name: models

  # -- rasa.additionalContainers allows to specify additional containers for the Rasa Deployment
  additionalContainers: []
    # - name: extra
    #   image: "busybox"
    #   command: ["bash", "-c"]

  # -- rasa.volumes specify additional volumes to mount in the Rasa container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes: []
  #   - hostPath:
  #       path: <HOST_PATH>
  #     name: <VOLUME_NAME>

  # -- rasa.volumeMounts specifies additional volumes to mount in the Rasa container
  volumeMounts: []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- rasa.serviceAccount defines service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: true
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name is the name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- rasa.podAnnotations defines annotations to add to the pod
  podAnnotations: {}
    # container.apparmor.security.beta.kubernetes.io/rasa: runtime/default

  # -- rasa.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- rasa.containerSecurityContext defines security context that allows you to overwrite the container-level security context
  containerSecurityContext:
    enabled: true
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #   - ALL

  # -- rasa.service define service for Rasa OSS/Plus
  service:
    # -- service.type is used to specify service type
    type: ClusterIP
    # -- service.port is used to specify service port
    port: 5005
    # -- service.targetPort is ued to specify service target port
    targetPort: 5005
    # -- service.annotations defines annotations to add to the service
    annotations: {}
    # -- service.nodePort is used to specify the nodePort(s) value(s) for the LoadBalancer and NodePort service types
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
    nodePort:
    # -- service.loadBalancerIP exposes the Service externally using a cloud provider's load balancer
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    loadBalancerIP:
    # -- service.externalTrafficPolicy enables client source IP preservation
    ## Ref: http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    externalTrafficPolicy: Cluster

  # rasa.livenessProbe is used to override default liveness probe settings
  livenessProbe:
    # -- livenessProbe.enabled is used to enable or disable liveness probe
    enabled: true
    # -- livenessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /
      port: 5005
      scheme: HTTP
    # -- livenessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- livenessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- livenessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- livenessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- livenessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6
    # -- readinessProbe.terminationGracePeriodSeconds configures a grace period to wait between triggering a shut down of the failed container
    terminationGracePeriodSeconds: 30

  # rasa.readinessProbe is used to override default readiness probe settings
  readinessProbe:
    # -- readinessProbe.enabled is used to enable or disable readinessProbe
    enabled: true
    # -- readinessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /
      port: 5005
      scheme: HTTP
    # -- readinessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- readinessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- readinessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- readinessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- readinessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6

  # Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: false
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.lables defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.hosts specifies the hosts for this ingress
    hosts:
      - host: INGRESS.HOST.NAME
        paths:
          - path: /api
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- rasa.resources specifies the resources limits and requests
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # rasa.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # rasa.persistence creates PV and PVC to be used as model service. DO NOT use this if you are only running Rasa Pro.
  persistence:
    create: false
    storageClassName:
    storageRequests: 1Gi
    storageCapacity: 1Gi
    hostPath:
      enabled: false
      # path:
      # type:

  # -- rasa.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- rasa.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- rasa.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Settings for Rasa Pro Services
rasaProServices:
  # -- imagePullSecrets is used for private repository pull secrets
  ## If this is not set, global `imagePullSecrets` will be applied. If both are set, this takes priority.
  imagePullSecrets: []
  # - name: regcred

  # -- rasaProServices.enabled enables Rasa Pro Services deployment
  enabled: true
  # -- rasaProServices.replicaCount specifies number of replicas
  replicaCount: 1
  # rasaProServices.image defines image settings
  image:
    # -- image.repository specifies image repository
    repository: "europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pro-services"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent
    # -- Specifies image tag
    # image.tag specifies image tag
    tag: "3.2.3-latest"

  # -- rasaProServices.strategy specifies deployment strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0

  # rasaProServices.environmentVariables define environment variables to be passed to the Rasa Pro Services deployment
  # See: https://rasa.com/docs/rasa/deploy/deploy-rasa-pro-services#docker-container-configuration-reference
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # Address of the Kafka broker.
    KAFKA_BROKER_ADDRESS:
      value: ""
    # Topic Rasa Plus publishes events to and Rasa Pro consumes from
    KAFKA_TOPIC:
      value: "rasa-core-events"
    # Set the log level of the application
    LOGGING_LEVEL:
      value: "INFO"
    # URL of the data lake to store analytics data in
    RASA_ANALYTICS_DB_URL:
      value: ""
      # secret:
      #   name:
      #   key:
    # SASL mechanism to use for authentication.
    KAFKA_SASL_MECHANISM:
      value: "PLAIN"
    # Username for SASL authentication.
    KAFKA_SASL_USERNAME:
      value: ""
    # Password for SASL authentication
    KAFKA_SASL_PASSWORD:
      secret:
        name: "rasa-secrets"
        key: "kafkaSslPassword"
    # Security protocol to use for communication with Kafka
    KAFKA_SECURITY_PROTOCOL:
      value: "PLAINTEXT"
    # Filepath for SSL CA Certificate that will be used to connect with Kafka
    KAFKA_SSL_CA_LOCATION:
      value: ""

  # -- rasaProServices.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom: []
    # - configMapRef:
    #     name: my-configmap

  # -- rasaProServices.additionalContainers allows to specify additional containers for the Rasa Pro Services Deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- rasaProServices.volumes specify additional volumes for the Rasa Pro Services container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes: []
    # - hostPath:
    #   path: <HOST_PATH>
    #   name: <VOLUME_NAME>

  # -- rasaProServices.volumeMounts specifies additional volumes to mount in the Rasa Pro Services container
  volumeMounts: []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- rasaProServices.serviceAccount defines service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: true
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name is the name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- rasaProServices.podAnnotations defines annotations to add to the pod
  podAnnotations: {}
    # container.apparmor.security.beta.kubernetes.io/rasa: runtime/default

  # -- rasaProServices.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- rasaProServices.containerSecurityContext defines security context that allows you to overwrite the container-level security context
  containerSecurityContext:
    enabled: true
    # privileged: false
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #   - ALL

  # -- rasaProServices.service define service for Rasa OSS/Plus
  service:
    # -- service.type is used to specify service type
    type: ClusterIP
    # -- service.port is used to specify service port
    port: 8732
    # -- service.targetPort is ued to specify service target port
    targetPort: 8732
    # -- service.annotations defines annotations to add to the service
    annotations: {}
    # -- service.nodePort is used to specify the nodePort(s) value(s) for the LoadBalancer and NodePort service types

  # rasaProServices.livenessProbe is used to override default liveness probe settings
  livenessProbe:
    # -- livenessProbe.enabled is used to enable or disable liveness probe
    enabled: true
    # -- livenessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /healthcheck
      port: 8732
      scheme: HTTP
    # -- livenessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- livenessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- livenessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- livenessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- livenessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6
    # -- readinessProbe.terminationGracePeriodSeconds configures a grace period to wait between triggering a shut down of the failed container
    terminationGracePeriodSeconds: 30

  # rasaProServices.readinessProbe is used to override default readiness probe settings
  readinessProbe:
    # -- readinessProbe.enabled is used to enable or disable readinessProbe
    enabled: true
    # -- readinessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /healthcheck
      port: 8732
      scheme: HTTP
    # -- readinessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- readinessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- readinessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- readinessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- readinessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6

  # -- rasaProServices.resources specifies the resources limits and requests
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # rasaProServices.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- rasaProServices.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- rasaProServices.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- rasaProServices.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Network policy settings
networkPolicy:
  # -- Specifies whether to enable network policies
  enabled: false
  # -- Specifies whether to apply denyAll network policy
  denyAll: false
  # -- Allow for traffic from a given CIDR - it's required in order to make kubelet able to run live and readiness probes
  nodeCIDR: []
    # - ipBlock:
    #     cidr: 0.0.0.0/0

# Defines global settings for all resources
global:
  # -- global.additionalDeploymentLabels can be used to map organizational structures onto system objects
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  additionalDeploymentLabels: {}
  ingressHost:

# -- hostNetwork controls whether the pod may use the node network namespace
hostNetwork: false

# -- hostAliases specifies pod-level override of hostname resolution when DNS and other options are not applicable
hostAliases: []
# - ip: 127.0.0.1
#   hostnames:
#   - "localhost"

# -- dnsPolicy specifies Pod's DNS policy
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
dnsPolicy: ""

# -- dnsConfig specifies Pod's DNS condig
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig:
  {}
  # options:
  # - name: ndots
  #   value: "1"

# -- deploymentAnnotations defines annotations to add to all Rasa deployments
deploymentAnnotations: {}
  #  key: "value"

# -- deploymentLabels defines labels to add to all Rasa deployment
deploymentLabels: {}

# -- podLabels defines labels to add to all Rasa pod(s)
podLabels: {}

## Settings for Duckling
duckling:
  # -- duckling.enabled enables Duckling deployment
  enabled: false
  # -- duckling.replicaCount specifies number of replicas
  replicaCount: 1
  # duckling.image defines image settings
  image:
    # -- image.repository specifies image repository
    repository: "rasa/duckling"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent
    # -- image.tag specifies image tag
    tag: "0.2.0.2-r0"

  # -- duckling.strategy specifies deployment strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  #   type: RollingUpdate
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0

  settings:
    # -- settings.port defines port on which Duckling runs
    port: 8000
    # -- settings.scheme defines sheme by which the service are accessible
    scheme: http

  # -- duckling.args overrides the default arguments for the container
  args: []
    # - "-p"
    # - --access-log=/dev/stdout
    # - --error-log=/dev/stderr

  # -- duckling.command overrides the default command for the container
  command: []
  # - duckling-example-exe
  # -- duckling.additionalEnv adds additional environment variables
  additionalEnv: []
    # - name: SOME_CUSTOM_ENV_VAR
    #   value: "custom value"
    # - name: SOME_CUSTOM_ENV_VAR_FROM_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name:
    #       key:

  # -- duckling.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom: []
    # - configMapRef:
    #     name: my-configmap

  # -- duckling.initContainers allows to specify init containers for the Duckling deployment
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
  #  - name: init
  #    image: "busybox"
  #    command: ["bash", "-c"]
  #    args:
  #      - echo "init container"

  # -- duckling.additionalContainers allows to specify additional containers for the Duckling Deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- duckling.volumes specify additional volumes to mount in the Duckling container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes: []
  #   - hostPath:
  #       path: <HOST_PATH>
  #     name: <VOLUME_NAME>

  # -- duckling.volumeMounts specifies additional volumes to mount in the Duckling container
  volumeMounts: []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- duckling.serviceAccount defines service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: true
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name is the name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- duckling.podAnnotations defines annotations to add to the pod
  podAnnotations: {}
    # container.apparmor.security.beta.kubernetes.io/duckling: runtime/default

  # -- duckling.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- duckling.containerSecurityContext defines security context that allows you to overwrite the container-level security context
  containerSecurityContext:
    enabled: true
    # privileged: false
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #   - ALL

  # -- duckling.service define service for Duckling
  service:
    # -- service.type is used to specify service type
    type: ClusterIP
    # -- service.port is used to specify service port
    port: 8000
    # -- service.targetPort is ued to specify service target port
    targetPort: 8000
    # -- service.annotations defines annotations to add to the service
    annotations: {}
    # -- service.nodePort is used to specify the nodePort(s) value(s) for the LoadBalancer and NodePort service types
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
    nodePort:
    # -- service.loadBalancerIP exposes the Service externally using a cloud provider's load balancer
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    loadBalancerIP:
    # -- service.externalTrafficPolicy enables client source IP preservation
    ## Ref: http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    externalTrafficPolicy: Cluster

  # duckling.livenessProbe is used to override default liveness probe settings
  livenessProbe:
    # -- livenessProbe.enabled is used to enable or disable liveness probe
    enabled: true
    # -- livenessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /
      port: 8000
      scheme: HTTP
    # -- livenessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- livenessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- livenessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- livenessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- livenessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6
    # -- readinessProbe.terminationGracePeriodSeconds configures a grace period to wait between triggering a shut down of the failed container
    terminationGracePeriodSeconds: 30

  # duckling.readinessProbe is used to override default readiness probe settings
  readinessProbe:
    # -- readinessProbe.enabled is used to enable or disable readinessProbe
    enabled: true
    # -- readinessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /
      port: 8000
      scheme: HTTP
    # -- readinessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- readinessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- readinessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- readinessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- readinessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6

  # Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: false
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.lables defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.hosts specifies the hosts for this ingress
    hosts:
      - host: chart-example.local
        paths:
          - path: /api
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- duckling.resources specifies the resources limits and requests
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # duckling.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- duckling.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- duckling.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- duckling.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

actionServer:
  # -- actionServer.enabled enables Action Server deployment
  enabled: false
  # -- actionServer.replicaCount specifies number of replicas
  replicaCount: 1
  # actionServer.image defines image settings
  image:
    # -- image.repository specifies image repository
    repository: "rasa/rasa-sdk"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent
    # -- image.tag specifies image tag
    tag: "3.6.2"

  # -- actionServer.strategy specifies deployment strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}
  #   type: RollingUpdate
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0

  settings:
    # -- settings.port defines port on which Action Server runs
    port: 5055
    # -- settings.scheme defines sheme by which the service are accessible
    scheme: http

  # -- actionServer.args overrides the default arguments for the container
  args: []
    # - "-p"
    # - --access-log=/dev/stdout
    # - --error-log=/dev/stderr

  # -- actionServer.command overrides the default command for the container
  command: []

  # -- actionServer.additionalEnv adds additional environment variables
  additionalEnv: []
    # - name: SOME_CUSTOM_ENV_VAR
    #   value: "custom value"
    # - name: SOME_CUSTOM_ENV_VAR_FROM_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name:
    #       key:

  # -- actionServer.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom: []
    # - configMapRef:
    #     name: my-configmap

  # -- actionServer.initContainers allows to specify init containers for the Action Server deployment
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
  #  - name: init
  #    image: "busybox"
  #    command: ["bash", "-c"]
  #    args:
  #      - echo "init container"

  # -- actionServer.additionalContainers allows to specify additional containers for the Action Server Deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- actionServer.volumes specify additional volumes to mount in the Action Server container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes: []
  #   - hostPath:
  #       path: <HOST_PATH>
  #     name: <VOLUME_NAME>

  # -- actionServer.volumeMounts specifies additional volumes to mount in the Action Server container
  volumeMounts: []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- actionServer.serviceAccount defines service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: true
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name is the name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- actionServer.podAnnotations defines annotations to add to the pod
  podAnnotations: {}
    # container.apparmor.security.beta.kubernetes.io/action-server: runtime/default

  # -- actionServer.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- actionServer.containerSecurityContext defines security context that allows you to overwrite the container-level security context
  containerSecurityContext:
    enabled: true
    # privileged: false
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- actionServer.service define service for Action Server
  service:
    # -- service.type is used to specify service type
    type: ClusterIP
    # -- service.port is used to specify service port
    port: 5055
    # -- service.targetPort is ued to specify service target port
    targetPort: 5055
    # -- service.annotations defines annotations to add to the service
    annotations: {}
    # -- service.nodePort is used to specify the nodePort(s) value(s) for the LoadBalancer and NodePort service types
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
    nodePort:
    # -- service.loadBalancerIP exposes the Service externally using a cloud provider's load balancer
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    loadBalancerIP:
    # -- service.externalTrafficPolicy enables client source IP preservation
    ## Ref: http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    externalTrafficPolicy: Cluster

  # actionServer.livenessProbe is used to override default liveness probe settings
  livenessProbe:
    # -- livenessProbe.enabled is used to enable or disable liveness probe
    enabled: true
    # -- livenessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /health
      port: 5055
      scheme: HTTP
    # -- livenessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- livenessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- livenessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- livenessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- livenessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6
    # -- readinessProbe.terminationGracePeriodSeconds configures a grace period to wait between triggering a shut down of the failed container
    terminationGracePeriodSeconds: 30

  # actionServer.readinessProbe is used to override default readiness probe settings
  readinessProbe:
    # -- readinessProbe.enabled is used to enable or disable readinessProbe
    enabled: true
    # -- readinessProbe.httpGet is used to define HTTP request
    httpGet:
      path: /health
      port: 5055
      scheme: HTTP
    # -- readinessProbe.initialDelaySeconds defines wait time in seconds before performing the first probe
    initialDelaySeconds: 15
    # -- readinessProbe.periodSeconds specifies that the kubelet should perform a liveness probe every X seconds
    periodSeconds: 15
    # -- readinessProbe.successThreshold defines how often (in seconds) to perform the probe
    successThreshold: 1
    # -- readinessProbe.timeoutSeconds defines number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- readinessProbe.failureThreshold defines after how many failures container is considered unhealthy
    failureThreshold: 6

  # Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: false
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.lables defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.hosts specifies the hosts for this ingress
    hosts:
      - host: chart-example.local
        paths:
          - path: /api
            pathType: Prefix
        extraPaths: []
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- actionServer.resources specifies the resources limits and requests
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # actionServer.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- actionServer.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- actionServer.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- actionServer.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

replicated:
  enabled: false
