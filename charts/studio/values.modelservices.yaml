############################
# THIS IS WORK IN PROGRESS #
############################

# -- (string) Override name of app
nameOverride: "mts"
# -- (string) Override the full qualified app name
fullnameOverride: "mts"

# -- Repository pull secrets
imagePullSecrets:
  []
  # - name: regcred

# Disable this in case you only want to deploy MTS/MRS
studioEnabled: false

# Model training and running service specific configuration
modelService:
  # -- GCP credentials for the service account
  gcpCredentials:
    secretName: "studio-secrets"
    secretKey: "GCP_CREDS"

  runsInCluster: true

  rasaProLicense:
    secretName: "studio-secrets"
    secretKey: "RASA_PRO_LICENSE_SECRET_KEY"

  openAiKey:
    secretName: "studio-secrets"
    secretKey: "OPENAI_API_KEY_SECRET_KEY"

  keycloak:
    enableAuthorization: false
    serverUrl:
    realmName:
    clientId:
    clientSecret:
      secretName: "studio-secrets"
      secretKey: "KEYCLOAK_CLIENT_SECRET"

  kafka:
    brokerAddress: "flowing-newt-7970-us1-kafka.upstash.io:9092"
    securityProtocol: "SASL_SSL"
    saslMechanism: "SCRAM-SHA-256"
    saslUsername: "Zmxvd2luZy1uZXd0LTc5NzAkJyiK6OMXSzrb9JeVh17UBvzdIbgBCWnaWkUTyc4"
    saslPassword:
      secretName: "studio-secrets"
      secretKey: "KAFKA_SASL_PASSWORD"
    sslCaLocation: ""

  training:
    enabled: true

    # -- Define service account
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: true
      # -- Annotations to add to the service account
      annotations: {}
      # -- The name of the service account to use.
      ## If not set and create is true, a name is generated using the fullname template
      name: ""

    orchestrator:
      # -- Specifies number of replicas
      replicaCount: 1
      # -- Define image settings
      image:
        # -- Specifies image repository
        repository: "us-central1-docker.pkg.dev/playground-studio-398307/studio-support-images/"
        # -- Specifies image name
        name: "model-training-orchestrator"
        # -- Specifies image tag
        tag: "latest"
        # -- Specifies image pull policy
        pullPolicy: Always

      # -- Define environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        AUTHENTICATION_ENDPOINT_ENABLED:
          value: "false"
        TRAINING_RESULT_TOPIC:
          value: "helm-training-result"
        TRAINING_RESULT_CONSUMER_GROUP_ID:
          value: "training-result-consumer-group"
        TRAINING_JOB_TOPIC:
          value: "helm-training-job"
        GOOGLE_CLOUD_PROJECT:
          value: "playground-studio"
        CLOUDSDK_COMPUTE_ZONE:
          value: "us-central1"
        THIRD_PARTY_STORAGE_BUCKET:
          value: "studio_model_training_service"
        TRAINING_STORAGE:
          value: "gcs"
        TRAINING_STORAGE_BUCKET:
          value: "studio_model_training_service"
        TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
          secret:
            name: "studio-secrets"
            key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- Specify additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- Specifies additional volumes to mount
      volumeMounts:
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- Allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- Annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-training-service-orchestrator: runtime/default

      # -- Define pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- Define security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        # privileged: false
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Define service
      service:
        type: NodePort
        # -- Specify service port
        port: 8000
        # -- Specify service target port
        targetPort: 8000

      # -- Override default liveness probe settings
      livenessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Override default readiness probe settings
      readinessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Configure the ingress resource.
      ## ref: http://kubernetes.io/docs/user-guide/ingress/
      ingress:
        # -- Specifies whether an ingress service should be created
        enabled: true
        # -- Specifies the ingress className to be used
        className: ""
        # -- Labels to add to the ingress
        labels: {}
        # -- Annotations to add to the ingress
        annotations:
          kubernetes.io/ingress.class: "gce"
        # -- Specifies the hosts for this ingress
        hosts:
          - host:
            paths:
              - path: /
                pathType: Prefix
            extraPaths: []
        # -- Spefices the TLS configuration for ingress
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local

      # -- Specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- Allow the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- Tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- Allow the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    consumer:
      # -- Specifies number of replicas
      replicaCount: 1
      # -- Define image settings
      image:
        # -- Specifies image repository
        repository: "us-central1-docker.pkg.dev/playground-studio-398307/studio-support-images/"
        # -- Specifies image name
        name: "model-training-job-consumer"
        # -- Specifies image tag
        tag: "latest"
        # -- Specifies image pull policy
        pullPolicy: Always

      # -- Define environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        KAFKA_JOB_TOPIC:
          value: "helm-training-job"
        MODEL_TRAINING_KAFKA_CONSUMER_ID:
          value: "training-result-consumer-group"
        KAFKA_RESULT_TOPIC:
          value: "helm-training-result"
        GOOGLE_CLOUD_PROJECT:
          value: "playground-studio"
        CLOUDSDK_COMPUTE_ZONE:
          value: "us-central1"
        TRAINING_STORAGE:
          value: "gcs"
        GCS_BUCKET_NAME:
          value: "studio_model_training_service"
        KUBERNETES_BASE_TRAINING_DATA_PATH:
          value: "/home"
        KUBERNETES_JOB_BOT_CONFIG_MOUNT:
          value: "/app"

      # -- envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- volumes specify additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- volumeMounts specifies additional volumes to mount
      volumeMounts:
        []
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- additionalContainers allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- Annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-training-service-consumer: runtime/default

      # -- Define pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- Define security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        # privileged: false
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- Allow the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- Tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- Allow the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

  running:
    enabled: true

    # -- Define service account
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: true
      # -- Annotations to add to the service account
      annotations: {}
      # -- The name of the service account to use.
      ## If not set and create is true, a name is generated using the fullname template
      name: ""

    orchestrator:
      # -- Specifies number of replicas
      replicaCount: 1
      # -- Define image settings
      image:
        # -- Specifies image repository
        repository: "us-central1-docker.pkg.dev/playground-studio-398307/studio-support-images/"
        # -- Specifies image name
        name: "model-running-orchestrator"
        # -- Specifies image tag
        tag: "latest"
        # -- Specifies image pull policy
        pullPolicy: Always

      # -- Define environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        DEPLOYMENT_RESULT_TOPIC:
          value: "helm-deployment-result"
        DEPLOYMENT_RESULT_CONSUMER_GROUP_ID:
          value: "deployment-result-consumer-group"
        DEPLOYMENT_JOB_TOPIC:
          value: "helm-deployment-job"
        LOGGING_LEVEL:
          value: "INFO"
        DEPLOYMENT_DATA_STORAGE:
          value: "gcs"
        GOOGLE_CLOUD_PROJECT:
          value: "playground-studio"
        CLOUDSDK_COMPUTE_ZONE:
          value: "us-central1"
        AUTHENTICATION_ENDPOINT_ENABLED:
          value: "false"
        DEPLOYMENT_STORAGE_BUCKET:
          value: "studio_model_training_service"
        TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
          secret:
            name: "studio-secrets"
            key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"
        DEPLOYMENT_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
          secret:
            name: "studio-secrets"
            key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"

      # -- envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- specify additional volumes for the Studio event ingestion container
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- Specifies additional volumes to mount
      volumeMounts:
        []
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- Allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- Annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-running-service-orchestrator: runtime/default

      # -- Define pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- Define security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        # privileged: false
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      # -- Define service
      service:
        type: NodePort
        # -- Specify service port
        port: 8001
        # -- Specify service target port
        targetPort: 8001

      # -- Override default liveness probe settings
      livenessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Override default readiness probe settings
      readinessProbe:
        enabled: true
        httpGet:
          path: /
          port: 8001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 5
        failureThreshold: 6

      # -- Configure the ingress resource.
      ## ref: http://kubernetes.io/docs/user-guide/ingress/
      ingress:
        # -- Specifies whether an ingress service should be created
        enabled: true
        # -- Specifies the ingress className to be used
        className: ""
        # -- Labels to add to the ingress
        labels: {}
        # -- Annotations to add to the ingress
        annotations:
          kubernetes.io/ingress.class: "gce"
        # -- Specifies the hosts for this ingress
        hosts:
          - host:
            paths:
              - path: /
                pathType: Prefix
            extraPaths: []
        # -- Spefices the TLS configuration for ingress
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local

      # -- Specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- Allow the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- Tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- Allow the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    consumer:
      # -- Specifies number of replicas
      replicaCount: 1
      # -- Define image settings
      image:
        # -- Specifies image repository
        repository: "us-central1-docker.pkg.dev/playground-studio-398307/studio-support-images/"
        # -- Specifies image name
        name: "model-running-job-consumer"
        # -- Specifies image tag
        tag: "latest"
        # -- Specifies image pull policy
        pullPolicy: Always

      # -- Define environment variables for deployment
      # Example: Specify the string value for variables
      #   value: my-value
      # Example: Specify the value for variables sourced from a Secret.
      #   secret:
      #     name: my-secret
      #     key: my-secret-key
      # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
      environmentVariables:
        DEPLOYMENT_JOB_KAFKA_TOPIC:
          value: "helm-deployment-job"
        MODEL_DEPLOYMENT_KAFKA_CONSUMER_ID:
          value: "deployment-result-consumer-group"
        KAFKA_DEPLOYMENT_RESULT_TOPIC:
          value: "helm-deployment-result"
        GOOGLE_CLOUD_PROJECT:
          value: "playground-studio"
        CLOUDSDK_COMPUTE_ZONE:
          value: "us-central1"
        TRAINING_STORAGE:
          value: "gcs"
        BOT_CONFIG_FETCHER_TYPE:
          value: "gcs"
        GCS_BUCKET_NAME:
          value: "studio_model_training_service"
        KUBERNETES_BASE_BOT_DATA_PATH:
          value: "/home"
        KUBERNETES_JOB_BOT_CONFIG_MOUNT:
          value: "/app"
        DEPLOYMENT_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
          secret:
            name: "studio-secrets"
            key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"
        OPENAI_API_KEY_SECRET_NAME:
          value: "studio-secrets"
        OPENAI_API_KEY_SECRET_KEY:
          value: "OPENAI_API_KEY_SECRET_KEY"

      # -- envFrom is used to add environment variables from ConfigMap or Secret
      envFrom:
        []
        # - configMapRef:
        #     name: my-configmap

      # -- Specify additional volumes
      ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
        []
        # - hostPath:
        #   path: <HOST_PATH>
        #   name: <VOLUME_NAME>

      # -- Specifies additional volumes to mount
      volumeMounts:
        []
        # - name: <VOLUME_NAME>
        #   mountPath: <CONTAINER_PATH>
        #   readOnly: true

      # -- Allows to specify additional containers for the deployment
      additionalContainers: []
      #  - name: extra
      #    image: "busybox"
      #    command: ["bash", "-c"]

      # -- Annotations to add to the pod
      podAnnotations:
        {}
        # container.apparmor.security.beta.kubernetes.io/model-running-service-consumer: runtime/default

      # -- Define pod security context
      podSecurityContext:
        enabled: true
        # fsGroup: 2000

      # -- Define security context that allows you to overwrite the pod-level security context
      securityContext:
        enabled: true
        # privileged: false
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
        # seccompProfile:
        #   type: RuntimeDefault

      rasaReadinessProbe:
        initialDelaySeconds: 10
        intervalInSeconds: 5
        failureThreshold: 50

      rasaStartupProbe:
        initialDelaySeconds: 10
        intervalInSeconds: 5
        failureThreshold: 50

      # -- Specifies the resources limits and requests
      resources:
        {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      # -- Allow the deployment to be scheduled on selected nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      # -- Tolerations for pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      # -- Allow the deployment to schedule using affinity rules
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

  persistence:
    # -- Should the PV and PVC be created
    # It is good practice to create volumes once and then reuse them.
    # So set this value to true only when you are deploying the service for the first time.
    # If you are redeploying the service, set this value to false.
    create: true
    # -- Type of the volume that will be used to store the training data
    # Valid values: local, nfs
    type: nfs
    # -- If you are deploying to AWS and using EFS for volume, set this value to true.
    aws: false
    # -- FileSystemId of the AWS EFS volume
    efs_id: ""
    # -- Storage Class name for PV
    storageClassName: "standard-rwo"
    # -- Storage Capacity for PV
    storageCapacity: 1Gi
    # -- Storage requests for PVC
    storageRequests: 1Gi
    # -- DNS name or IP address of the NFS server
    # This value is used only when type is set to nfs
    nfsServer: "35.223.231.182"
    # -- Directory from the host machine that will be mounted to the container for training data
    # This value is used only when type is set to local
    hostPath: ""
    # -- Node on which the PV will be created
    # This value is used only when type is set to local
    localNodeName: ""
