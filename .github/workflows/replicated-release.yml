name: Replicated Testing

on:
  push:
    branches:
      - release/replicated
  workflow_dispatch:

env:
  ARTIFACT_REGISTRY: europe-west3-docker.pkg.dev
  HELM_REPOSITORY: rasa-releases
  HELM_CHART: helm-charts
  GCP_BUCKET_CREDENTIALS: ${{ secrets.GCP_BUCKET_CREDENTIALS }}
  KAFKA_HELM_VERSION: 26.11.1
  POSTGRESQL_HELM_VERSION: 13.4.0
  NGINX_HELM_VERSION: 4.9.1

jobs:
  release-to-replicated:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0

      - name: Install Helm 3
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78
        with:
          version: v3.11.2

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d
        with:
          token_format: 'access_token'
          credentials_json: ${{ secrets.HELM_RELEASE_CREDENTIALS }}

      - name: Login to Helm registry using Google Auth token
        run: |-
          echo '${{ steps.auth.outputs.access_token }}' | helm registry login -u oauth2accesstoken --password-stdin https://${{ env.ARTIFACT_REGISTRY }}

      - name: Read Helm Chart
        id: chart-info
        uses: miraai/read-helm-chart-yaml@9a798908719da8d062b86097d4ff1ad85abfc7aa
        with:
          path: charts/studio/

      - name: Add Helm Chart repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

      - name: Pull Helm Charts
        id: get_chart
        run: |
          helm pull oci://${{ env.ARTIFACT_REGISTRY }}/${{ env.HELM_REPOSITORY }}/${{ env.HELM_CHART }}/${{ steps.chart-info.outputs.name }} --version ${{ steps.chart-info.outputs.version }} -d ./replicated
          helm pull ingress-nginx/ingress-nginx --version ${{ env.NGINX_HELM_VERSION }} -d ./replicated
          helm pull oci://registry-1.docker.io/bitnamicharts/postgresql --version ${{ env.POSTGRESQL_HELM_VERSION }} -d ./replicated
          helm pull oci://registry-1.docker.io/bitnamicharts/kafka --version ${{ env.KAFKA_HELM_VERSION }} -d ./replicated

      - name: Update Helm chart version for Replicated release
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.chart.chartVersion = "${{ steps.chart-info.outputs.version }}"' replicated/studio-chart.yaml

      - name: Update Kafka Helm chart version for Replicated release
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.chart.chartVersion = "${{ env.KAFKA_HELM_VERSION }}"' replicated/kafka-chart.yaml

      - name: Update PostgresSQL Helm chart version for Replicated release
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.chart.chartVersion = "${{ env.POSTGRESQL_HELM_VERSION }}"' replicated/postgresql-chart.yaml

      - name: Update Nginx Ingress Helm chart version for Replicated release
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.chart.chartVersion = "${{ env.NGINX_HELM_VERSION }}"' replicated/ingress-nginx-chart.yaml

      - name: Create the infrasec release
        uses: replicatedhq/action-kots-release@configurable-endpoint
        with:
          replicated-app: ${{ secrets.REPLICATED_APP }}
          replicated-api-token: ${{ secrets.REPLICATED_TOKEN }}
          replicated-api-origin: https://api.replicated.com/vendor
          yaml-dir: ./replicated
          promote-channel: "infrasec"
          version: ${{ steps.chart-info.outputs.version }}

  compatibility-matrix:
    needs: release-to-replicated
    strategy:
      fail-fast: false
      matrix:
        cluster:
          - { distribution: gke, version: v1.28 }
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0

      - name: Install Helm 3
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78
        with:
          version: v3.11.2

      - name: Read Helm Chart
        id: chart-info
        uses: miraai/read-helm-chart-yaml@9a798908719da8d062b86097d4ff1ad85abfc7aa
        with:
          path: charts/studio/

      - name: Update Kots config file
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.values.gcp_credentials.value = "${{ env.GCP_BUCKET_CREDENTIALS }}"' .github/kots-config.yaml

      - name: Add Kots config as an environment variable
        run: |
          echo "KOTS_CONFIG<<EOF" >> $GITHUB_ENV
          cat .github/kots-config.yaml >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Customer 
        id: create-customer
        uses: replicatedhq/replicated-actions/create-customer@v1
        with:
          app-slug: ${{ secrets.REPLICATED_APP }}
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          customer-name: ${{ steps.chart-info.outputs.name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}
          channel-slug: infrasec
          customer-email: ${{ steps.chart-info.outputs.name }}@example.com
          expires-in: 2
          is-kots-install-enabled: true

      - id: create-cluster
        uses: replicatedhq/replicated-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          ttl: 30m
          cluster-name: studio-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}-${{ steps.chart-info.outputs.version }}
          export-kubeconfig: true

      - name: Deploy the app
        uses: replicatedhq/replicated-actions/kots-install@v1
        continue-on-error: true
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          app-slug: ${{ secrets.REPLICATED_APP }}/infrasec
          license-file: ${{ steps.create-customer.outputs.license-file }}
          app-version-label: ${{ steps.chart-info.outputs.version }}
          namespace: studio
          config-values: $KOTS_CONFIG

      - name: wait for the replicated pod to be running
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/replicated -n studio --timeout=300s

      - name: wait for the replicated pod to be running
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/studio-backend -n studio --timeout=300s

      - name: Remove Cluster
        id: remove-cluster
        if: always()
        uses: replicatedhq/replicated-actions/remove-cluster@v1
        continue-on-error: true # It could be that the cluster is already removed
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

      - name: Archive Customer
        id: archive-customer
        if: always()
        uses: replicatedhq/replicated-actions/archive-customer@v1
        with:
          api-token: ${{ secrets.REPLICATED_TOKEN }}
          customer-id: ${{ steps.create-customer.outputs.customer-id }}
        
