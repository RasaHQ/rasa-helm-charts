# TODO: Determine if these settings are correct
{{- define "rasa.downloadInitialModel.initContainer" -}}
- name: download-initial-model
  {{- if .Values.rasa.podSecurityContext.enabled }}
  securityContext:
    {{- omit .Values.rasa.podSecurityContext "enabled" | toYaml | nindent 4 }}
  {{- end }}
  image: "alpine"
  command: ["/bin/sh", "-c"]
  args:
    - cd /app/models/ && wget {{ .Values.rasa.settings.initialModel }} -O model.tar.gz
  volumeMounts:
    - mountPath: /app/models
      name: models
{{- end -}}

{{- define "rasa.trainInitialModel.initContainer" -}}
- name: train-initial-model
  {{- if .Values.rasa.podSecurityContext.enabled }}
  securityContext:
    {{- omit .Values.rasa.podSecurityContext "enabled" | toYaml | nindent 4 }}
  {{- end }}
  image: "{{ .Values.rasa.image.repository }}:{{ .Values.rasa.image.tag }}"
  imagePullPolicy: {{ .Values.rasa.image.pullPolicy }}
  command: ["/bin/bash", "-c"]
  env:
    - name: "TF_CPP_MIN_LOG_LEVEL"
      value: "2"
    - name: "HOME"
      value: "/app"
    - name: "RASA_TELEMETRY_ENABLED" #change to rasa_pro_telemetry_enabled if rasa plus is enabled
      value: {{ .Values.rasa.settings.telemetry.enabled | quote }}
  args:
    - "if [ -z \"$(ls -A /app | grep -v models)\" ]; then echo \"Can't find data, creating a new project\"; rasa init --no-prompt; else rasa train; fi"
  volumeMounts:
    - mountPath: /app/models
      name: models
    - mountPath: /app
      name: app-dir
{{- end -}}

{{- define "rasa.initialModel.initContainer.volumes" -}}
- name: models
  emptyDir: {}
- name: app-dir
  emptyDir: {}
{{- end -}}

{{- define "rasa.initialModel.initContainer.volumeMounts" -}}
- mountPath: /app/models
  name: models
{{- end -}}
