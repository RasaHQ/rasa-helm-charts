# Default values for op-kits.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- (string) Override name of app
nameOverride: ""
# -- (string) Override the full qualified app name
fullnameOverride: ""

# Global settings
global:
  # -- (string) Global namespace override. If empty, uses release namespace
  namespace: ""

# CloudNativePG Configuration
cloudnativepg:
  # -- Enable CloudNativePG cluster deployment
  enabled: true

  # CloudNativePG operator must be pre-installed in the cluster
  # See README.md for installation instructions

  cluster:
    # -- (string) Override cluster name. If empty, uses "{{ release-name }}-pg"
    nameOverride: ""
    # -- Number of PostgreSQL instances in the cluster
    instances: 1
    # -- PostgreSQL container image to use
    image:
      repository: "ghcr.io/cloudnative-pg/postgresql"
      tag: "16"

    # -- Additional annotations to apply to the PostgreSQL Cluster resource
    # Example:
    # annotations:
    #   backup.postgresql.cnpg.io/enabled: "true"
    #   monitoring.postgresql.cnpg.io/scrape: "true"
    annotations: {}

    # Storage configuration for PostgreSQL
    storage:
      # -- Storage size for PostgreSQL data
      size: "15Gi"
      # -- Storage class name. Change to your storage class
      storageClass: "gp2"

    # -- Enable superuser access (creates <cluster>-superuser secret)
    enableSuperuserAccess: true

    # Bootstrap configuration for initial database setup
    bootstrap:
      initdb:
        # -- Database name to create during initialization
        database: "app"
        # -- Database owner/user to create during initialization
        owner: "appuser"

    # Monitoring configuration
    monitoring:
      # -- Enable Prometheus PodMonitor for metrics collection
      enablePodMonitor: false

    # -- Additional PostgreSQL configuration parameters
    # Example:
    # postgresql:
    #   parameters:
    #     max_connections: "200"
    #     shared_buffers: "256MB"
    postgresql:
      parameters: {}

    # -- Resource limits and requests for PostgreSQL containers
    # Example:
    # resources:
    #   limits:
    #     cpu: "1"
    #     memory: "1Gi"
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    resources: {}

# Strimzi Kafka Configuration
strimzi:
  # -- Enable Strimzi Kafka cluster deployment
  enabled: true

  # Strimzi Kafka operator must be pre-installed in the cluster
  # See README.md for installation instructions

  kafka:
    # -- (string) Override Kafka cluster name. If empty, uses "{{ release-name }}-kafka"
    nameOverride: ""
    # -- Container image for Kafka
    # image: "quay.io/strimzi/kafka:0.47.0-kafka-4.0.0"
    image:
      repository: "quay.io/strimzi/kafka"
      tag: "0.47.0-kafka-4.0.0"

    # -- Annotations to apply to the Kafka Cluster resource
    # Includes both operator configuration and custom annotations
    # Example:
    # annotations:
    #   strimzi.io/kraft: "enabled"           # Enable KRaft mode (no ZooKeeper)
    #   strimzi.io/node-pools: "enabled"     # Use KafkaNodePool resources
    #   strimzi.io/restart: "true"           # Custom restart annotation
    #   kafka.strimzi.io/logging: "debug"    # Custom logging annotation
    annotations:
      strimzi.io/kraft: "enabled"
      strimzi.io/node-pools: "enabled"

    # Entity Operator configuration
    # Topic and User operators are enabled by default with empty configuration
    entityOperator:
      topicOperator: {}
      userOperator: {}

    # Kafka listeners configuration
    # -- Kafka listeners define how clients connect to the cluster
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: scram-sha-512

    # Kafka broker configuration
    # -- Kafka configuration parameters for brokers
    # With 1 broker, keep replication factors at 1 (increase when scaling out)
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1

    # -- Resource limits and requests for Kafka brokers
    # Example:
    # resources:
    #   limits:
    #     cpu: "1"
    #     memory: "2Gi"
    #   requests:
    #     cpu: "100m"
    #     memory: "512Mi"
    resources: {}

  # Kafka Node Pools Configuration
  nodePools:
    # Controller node pool configuration
    controllers:
      # -- Enable controller node pool deployment
      enabled: true
      # -- Number of controller replicas
      replicas: 1
      # -- Node pool roles for controllers
      roles: ["controller"]

      # Storage configuration for controllers
      storage:
        # -- Storage type for controller nodes
        type: "persistent-claim"
        # -- Storage size for controller nodes
        size: "10Gi"
        # -- Storage class for controller nodes
        class: "gp2"
        # -- Whether to delete PVC when node pool is deleted
        deleteClaim: true

      # -- Resource limits and requests for controller nodes
      # Example:
      # resources:
      #   limits:
      #     cpu: "500m"
      #     memory: "1Gi"
      #   requests:
      #     cpu: "100m"
      #     memory: "256Mi"
      resources: {}

    # Broker node pool configuration
    brokers:
      # -- Enable broker node pool deployment
      enabled: true
      # -- Number of broker replicas
      replicas: 1
      # -- Node pool roles for brokers
      roles: ["broker"]

      # Storage configuration for brokers
      storage:
        # -- Storage type for broker nodes (JBOD allows multiple volumes)
        type: "jbod"
        # -- Storage volumes configuration for brokers
        volumes:
          - id: 0
            type: "persistent-claim"
            size: "10Gi"
            class: "gp2"
            deleteClaim: true

      # -- Resource limits and requests for broker nodes
      # Example:
      # resources:
      #   limits:
      #     cpu: "1"
      #     memory: "2Gi"
      #   requests:
      #     cpu: "200m"
      #     memory: "512Mi"
      resources: {}

  # Kafka Topics Configuration
  topics: {}
    # rasaEvents:
    #   enabled: true
    #   name: "rasa-events"
    #   partitions: 1
    #   replicas: 1
    #   config:
    #     retention.ms: 604800000  # 7 days
    #     cleanup.policy: "delete"

    # rasaEventsDlq:
    #   enabled: true
    #   name: "rasa-events-dlq"
    #   partitions: 1
    #   replicas: 1
    #   config:
    #     retention.ms: 1209600000  # 14 days
    #     cleanup.policy: "delete"

    # rasaCoreEvents:
    #   enabled: true
    #   name: "rasa-core-events"
    #   partitions: 1
    #   replicas: 1
    #   config:
    #     retention.ms: 604800000  # 7 days
    #     cleanup.policy: "delete"

    # rasaAssistant:
    #   enabled: true
    #   name: "rasa-assistant"
    #   partitions: 1
    #   replicas: 1
    #   config:
    #     retention.ms: 604800000  # 7 days
    #     cleanup.policy: "delete"

    # Additional topics can be added here
    # Example:
    # customTopic:
    #   enabled: false
    #   name: "custom-topic"
    #   partitions: 3
    #   replicas: 1
    #   config:
    #     retention.ms: 86400000  # 1 day

  # Kafka Users Configuration
  users:
    # Main application user configuration
    app:
      # -- Enable main application user creation
      enabled: true
      # -- Kafka user name for main application
      name: "app-user"

      # Authentication configuration
      authentication:
        # -- Authentication type for Kafka user
        type: "scram-sha-512"
        # -- Password configuration sourced from Kubernetes secret
        password:
          secretName: "app-secrets"
          secretKey: "KAFKA_SASL_PASSWORD"

      # Authorization can be added here
      # Example:
      # authorization:
      #   type: simple
      #   acls:
      #     - resource:
      #         type: topic
      #         name: app-events
      #       operation: Read

    # Additional users can be added here
    # Example:
    # customUser:
    #   enabled: false
    #   name: "custom-user"
    #   authentication:
    #     type: "scram-sha-512"

# Valkey Configuration
valkey:
  # -- Enable Valkey cluster deployment
  enabled: true

  # Valkey operator must be pre-installed in the cluster
  # See README.md for installation instructions

  cluster:
    # -- (string) Override cluster name. If empty, uses "{{ release-name }}-valkey"
    nameOverride: ""
    # -- Number of primary nodes; set >1 only if you intend to run Valkey Cluster
    nodes: 1
    # -- Replicas per primary (0 = standalone, >0 = primary + replicas)
    replicas: 0
    # -- Container image for Valkey
    # image: "ghcr.io/hyperspike/valkey:8.0.2"
    image: ""

    # -- Additional annotations to apply to the Valkey Cluster resource
    # Example:
    # annotations:
    #   valkey.hyperspike.io/monitoring: "enabled"
    #   valkey.hyperspike.io/backup: "enabled"
    annotations: {}

    # Service password configuration
    servicePassword:
      # -- Whether the service password is optional
      optional: false
      # -- Secret name containing the Valkey password
      name: "app-secrets"
      # -- Secret key for the Valkey password
      key: "VALKEY_PASSWORD"

    # -- Enable volume permissions initialization
    volumePermissions: true

    # Storage configuration for Valkey
    storage:
      spec:
        # -- Access modes for Valkey storage
        accessModes:
          - ReadWriteOnce
        # -- Storage size for Valkey data
        resources:
          requests:
            storage: "10Gi"
        # -- Storage class name. Change to your storage class
        storageClassName: "gp2"

    # -- Resource limits and requests for Valkey containers
    # Example:
    # resources:
    #   limits:
    #     cpu: "1"
    #     memory: "1Gi"
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    resources: []
      # requests:
      #   cpu: "100m"
      #   memory: "128Mi"
      # limits:
      #   cpu: "500m"
      #   memory: "512Mi"

    # TLS configuration (optional)
    # -- Enable TLS (requires cert-manager)
    tls: false
    # -- Certificate issuer name
    certIssuer: "selfsigned"
    # -- Certificate issuer type
    certIssuerType: "ClusterIssuer"

    # External access configuration (optional)
    externalAccess:
      # -- Enable external access to Valkey cluster
      enabled: false
      # -- Type of external access (LoadBalancer, NodePort, etc.)
      type: "LoadBalancer"

# Common settings applied to all resources
# -- Additional labels to apply to all resources
# Example:
# commonLabels:
#   environment: production
#   team: platform
commonLabels: {}

# -- Additional annotations to apply to all resources
# Example:
# commonAnnotations:
#   monitoring.coreos.com/scrape: "true"
#   prometheus.io/port: "8080"
commonAnnotations: {}

# Pod scheduling configuration for CloudNativePG and Valkey ONLY
# -- Node selector for all pods
# Example:
# nodeSelector:
#   kubernetes.io/os: linux
#   node-role.kubernetes.io/worker: "true"
nodeSelector: {}

# -- Tolerations for all pods
# Example:
# tolerations:
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"
# - key: "key2"
#   operator: "Exists"
#   effect: "NoExecute"
tolerations: []

# -- Affinity rules for all pods
# Example:
# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: kubernetes.io/os
#           operator: In
#           values:
#           - linux
#         - key: node-role.kubernetes.io/worker
#           operator: In
#           values:
#            - "true"

#   podAntiAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       podAffinityTerm:
#         labelSelector:
#           matchExpressions:
#           - key: app.kubernetes.io/name
#             operator: In
#             values:
#             - op-kits
#         topologyKey: kubernetes.io/hostname
affinity: {}
