############################
# THIS IS WORK IN PROGRESS #
############################

# -- (string) Override name of app
nameOverride: "mts"
# -- (string) Override the full qualified app name
fullnameOverride: "mts"

# -- Repository pull secrets
imagePullSecrets:
  []
  # - name: regcred

# Disable this in case you only want to deploy MTS/MRS
studioEnabled: false

# Model Training Service specific configuration
modelTrainingService:
  enabled: true

  # -- Define service account
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- The name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  orchestrator:
    # -- Specifies number of replicas
    replicaCount: 1
    # -- Define image settings
    image:
      # -- Specifies image repository
      repository: "europe-west3-docker.pkg.dev/rasa-releases/mts-orchestrator/"
      # -- Specifies image name
      name: "mts-orchestrator"
      # -- Specifies image tag
      tag: "1.1.1"
      # -- Specifies image pull policy
      pullPolicy: IfNotPresent

    # -- Define environment variables for deployment
    # Example: Specify the string value for variables
    #   value: my-value
    # Example: Specify the value for variables sourced from a Secret.
    #   secret:
    #     name: my-secret
    #     key: my-secret-key
    # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
    environmentVariables:
      RUNS_IN_CLUSTER:
        value: "true"
      KUBERNETES_NAMESPACE:
        value: ""
      AUTHENTICATION_ENDPOINT_ENABLED:
        value: "false"
      ENABLE_AUTHORIZATION:
        value: "false"
      KAFKA_BROKER_ADDRESS:
        value: ""
      KAFKA_SECURITY_PROTOCOL:
        value: ""
      TRAINING_RESULT_TOPIC:
        value: ""
      TRAINING_RESULT_CONSUMER_GROUP_ID:
        value: ""
      TRAINING_JOB_TOPIC:
        value: ""
      GOOGLE_CLOUD_PROJECT:
        value: ""
      CLOUDSDK_COMPUTE_ZONE:
        value: ""
      THIRD_PARTY_STORAGE_BUCKET:
        value: ""
      TRAINING_STORAGE:
        value: ""
      TRAINING_STORAGE_BUCKET:
        value: ""
      GOOGLE_APPLICATION_CREDENTIALS:
        value: ""
      TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT:
        secret:
          name: "studio-secrets"
          key: "TRAINING_STORAGE_SIGNED_URL_SERVICE_ACCOUNT"
      KEYCLOAK_SERVER_URL:
        value: ""
      KEYCLOAK_REALM:
        value: ""
      KEYCLOAK_CLIENT_ID:
        value: ""
      KEYCLOAK_CLIENT_SECRET:
        secret:
          name: "studio-secrets"
          key: "KEYCLOAK_CLIENT_SECRET"


    # -- envFrom is used to add environment variables from ConfigMap or Secret
    envFrom:
      []
      # - configMapRef:
      #     name: my-configmap

    # TODO: I will move this to the deployments when its decided how it should be
    # -- Specify additional volumes
    ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
    volumes:
      - name: "model-training-service-data-pv"
        secret:
          secretName: ""
      # - hostPath:
      #   path: <HOST_PATH>
      #   name: <VOLUME_NAME>

    # -- Specifies additional volumes to mount
    volumeMounts:
      - mountPath: ""
        name: "model-training-service-data-pv"
        readOnly: true
      # - name: <VOLUME_NAME>
      #   mountPath: <CONTAINER_PATH>
      #   readOnly: true

    # -- Allows to specify additional containers for the deployment
    additionalContainers: []
    #  - name: extra
    #    image: "busybox"
    #    command: ["bash", "-c"]

    # -- Annotations to add to the pod
    podAnnotations:
      {}
      # container.apparmor.security.beta.kubernetes.io/model-training-service-orchestrator: runtime/default

    # -- Define pod security context
    podSecurityContext:
      enabled: true
      # fsGroup: 2000

    # -- Define security context that allows you to overwrite the pod-level security context
    securityContext:
      enabled: true
      # privileged: false
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
      # seccompProfile:
      #   type: RuntimeDefault

    # -- Define service
    service:
      # -- Specify service type
      type: ClusterIP
      # -- Specify service port
      port: 8000
      # -- Specify service target port
      targetPort: 8000

    # -- Override default liveness probe settings
    livenessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    # -- Override default readiness probe settings
    readinessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    # -- Specifies the resources limits and requests
    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # -- Allow the deployment to be scheduled on selected nodes
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # -- Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    # -- Allow the deployment to schedule using affinity rules
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  consumer:
    # -- Specifies number of replicas
    replicaCount: 1
    # -- Define image settings
    image:
      # -- Specifies image repository
      repository: "europe-west3-docker.pkg.dev/rasa-releases/mts-job-consumer/"
      # -- Specifies image name
      name: "mts-job-consumer"
      # -- Specifies image tag
      tag: "1.1.1"
      # -- Specifies image pull policy
      pullPolicy: IfNotPresent

    # -- Define environment variables for deployment
    # Example: Specify the string value for variables
    #   value: my-value
    # Example: Specify the value for variables sourced from a Secret.
    #   secret:
    #     name: my-secret
    #     key: my-secret-key
    # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
    environmentVariables:
      RUNS_IN_CLUSTER:
        value: "true"
      KUBERNETES_NAMESPACE:
        value: ""
      KAFKA_BROKER_ADDRESS:
        value: ""
      KAFKA_SECURITY_PROTOCOL:
        value: ""
      KAFKA_JOB_TOPIC:
        value: ""
      MODEL_TRAINING_KAFKA_CONSUMER_ID:
        value: ""
      KAFKA_RESULT_TOPIC:
        value: ""
      GOOGLE_CLOUD_PROJECT:
        value: ""
      CLOUDSDK_COMPUTE_ZONE:
        value: ""
      TRAINING_STORAGE:
        value: ""
      GCS_BUCKET_NAME:
        value: ""
      KUBERNETES_BASE_TRAINING_DATA_PATH:
        value: "/home"
      KUBERNETES_JOB_BOT_CONFIG_MOUNT:
        value: "/app"
      KUBERNETES_DATA_PVC:
        value: ""
      GOOGLE_APPLICATION_CREDENTIALS:
        value: ""
      RASA_PRO_LICENSE_SECRET_NAME:
        value: ""
      RASA_PRO_LICENSE_SECRET_KEY:
        value: ""

    # -- backend.envFrom is used to add environment variables from ConfigMap or Secret
    envFrom:
      []
      # - configMapRef:
      #     name: my-configmap

    # -- eventIngestion.volumes specify additional volumes
    ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
    volumes:
      []
      # - hostPath:
      #   path: <HOST_PATH>
      #   name: <VOLUME_NAME>

    # -- eventIngestion.volumeMounts specifies additional volumes to mount
    volumeMounts:
      []
      # - name: <VOLUME_NAME>
      #   mountPath: <CONTAINER_PATH>
      #   readOnly: true

    # -- backend.additionalContainers allows to specify additional containers for the deployment
    additionalContainers: []
    #  - name: extra
    #    image: "busybox"
    #    command: ["bash", "-c"]

    # -- Annotations to add to the pod
    podAnnotations:
      {}
      # container.apparmor.security.beta.kubernetes.io/model-training-service-consumer: runtime/default

    # -- Define pod security context
    podSecurityContext:
      enabled: true
      # fsGroup: 2000

    # -- Define security context that allows you to overwrite the pod-level security context
    securityContext:
      enabled: true
      # privileged: false
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
      # seccompProfile:
      #   type: RuntimeDefault

    # -- Specifies the resources limits and requests
    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # -- Allow the deployment to be scheduled on selected nodes
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # -- Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    # -- Allow the deployment to schedule using affinity rules
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  persistence:
    # -- Should the PV and PVC be created
    # It is good practice to create volumes once and then reuse them.
    # So set this value to true only when you are deploying the service for the first time.
    # If you are redeploying the service, set this value to false.
    create: true
    # -- Type of the volume that will be used to store the training data
    # Valid values: local, nfs
    type: local
    # -- If you are deploying to AWS and using EFS for volume, set this value to true.
    aws: false
    # -- FileSystemId of the AWS EFS volume
    efs_id: ""
    # -- Storage Class name for PV
    storageClassName: ""
    # -- Storage Capacity for PV
    storageCapacity: 1Gi
    # -- Storage requests for PVC
    storageRequests: 1Gi
    # -- DNS name or IP address of the NFS server
    # This value is used only when type is set to nfs
    nfsServer:
    # -- Directory from the host machine that will be mounted to the container for training data
    # This value is used only when type is set to local
    hostPath:
    # -- Node on which the PV will be created
    # This value is used only when type is set to local
    localNodeName:

# Model Running Service specific configuration
modelRunningService:
  enabled: true

  # -- Define service account
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- The name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  orchestrator:
    # -- Specifies number of replicas
    replicaCount: 1
    # -- Define image settings
    image:
      # -- Specifies image repository
      repository: "europe-west3-docker.pkg.dev/rasa-releases/mrs-orchestrator/"
      # -- Specifies image name
      name: "mrs-orchestrator"
      # -- Specifies image tag
      tag: "1.1.1"
      # -- Specifies image pull policy
      pullPolicy: IfNotPresent

    # -- Define environment variables for deployment
    # Example: Specify the string value for variables
    #   value: my-value
    # Example: Specify the value for variables sourced from a Secret.
    #   secret:
    #     name: my-secret
    #     key: my-secret-key
    # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
    environmentVariables:
      RUNS_IN_CLUSTER:
        value: "true"
      KUBERNETES_NAMESPACE:
        value: ""
      KAFKA_BROKER_ADDRESS:
        value: ""
      KAFKA_SECURITY_PROTOCOL:
        value: ""
      DEPLOYMENT_RESULT_TOPIC:
        value: ""
      DEPLOYMENT_RESULT_CONSUMER_GROUP_ID:
        value: ""
      DEPLOYMENT_JOB_TOPIC:
        value: ""
      LOGGING_LEVEL:
        value: ""

    # -- envFrom is used to add environment variables from ConfigMap or Secret
    envFrom:
      []
      # - configMapRef:
      #     name: my-configmap

    # -- specify additional volumes for the Studio event ingestion container
    ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
    volumes:
      []
      # - hostPath:
      #   path: <HOST_PATH>
      #   name: <VOLUME_NAME>

    # -- Specifies additional volumes to mount
    volumeMounts:
      []
      # - name: <VOLUME_NAME>
      #   mountPath: <CONTAINER_PATH>
      #   readOnly: true

    # -- Allows to specify additional containers for the deployment
    additionalContainers: []
    #  - name: extra
    #    image: "busybox"
    #    command: ["bash", "-c"]

    # -- Annotations to add to the pod
    podAnnotations:
      {}
      # container.apparmor.security.beta.kubernetes.io/model-running-service-orchestrator: runtime/default

    # -- Define pod security context
    podSecurityContext:
      enabled: true
      # fsGroup: 2000

    # -- Define security context that allows you to overwrite the pod-level security context
    securityContext:
      enabled: true
      # privileged: false
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
      # seccompProfile:
      #   type: RuntimeDefault

    # -- Define service
    service:
      # -- Specify service type
      type: ClusterIP
      # -- Specify service port
      port: 8001
      # -- Specify service target port
      targetPort: 8001

    # -- Override default liveness probe settings
    livenessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8001
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    # -- Override default readiness probe settings
    readinessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8001
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    # -- Specifies the resources limits and requests
    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # -- Allow the deployment to be scheduled on selected nodes
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # -- Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    # -- Allow the deployment to schedule using affinity rules
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  consumer:
    # -- Specifies number of replicas
    replicaCount: 1
    # -- Define image settings
    image:
      # -- Specifies image repository
      repository: "europe-west3-docker.pkg.dev/rasa-releases/mrs-job-consumer/"
      # -- Specifies image name
      name: "mrs-job-consumer"
      # -- Specifies image tag
      tag: "1.1.1"
      # -- Specifies image pull policy
      pullPolicy: IfNotPresent

    # -- Define environment variables for deployment
    # Example: Specify the string value for variables
    #   value: my-value
    # Example: Specify the value for variables sourced from a Secret.
    #   secret:
    #     name: my-secret
    #     key: my-secret-key
    # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
    environmentVariables:
      RUNS_IN_CLUSTER:
        value: "true"
      KUBERNETES_NAMESPACE:
        value: ""
      KAFKA_BROKER_ADDRESS:
        value: ""
      KAFKA_SECURITY_PROTOCOL:
        value: ""
      DEPLOYMENT_JOB_KAFKA_TOPIC:
        value: ""
      MODEL_DEPLOYMENT_KAFKA_CONSUMER_ID:
        value: ""
      KAFKA_DEPLOYMENT_RESULT_TOPIC:
        value: ""
      GOOGLE_CLOUD_PROJECT:
        value: ""
      CLOUDSDK_COMPUTE_ZONE:
        value: ""
      TRAINING_STORAGE:
        value: ""
      BOT_CONFIG_FETCHER_TYPE:
        value: ""
      GCS_BUCKET_NAME:
        value: ""
      KUBERNETES_BASE_BOT_DATA_PATH:
        value: "/home"
      KUBERNETES_JOB_BOT_CONFIG_MOUNT:
        value: "/app"
      KUBERNETES_DATA_PVC:
        value: ""
      GOOGLE_APPLICATION_CREDENTIALS:
        value: ""
      RASA_PRO_LICENSE_SECRET_NAME:
        value: ""
      RASA_PRO_LICENSE_SECRET_KEY:
        value: ""

    # -- envFrom is used to add environment variables from ConfigMap or Secret
    envFrom:
      []
      # - configMapRef:
      #     name: my-configmap

    # -- Specify additional volumes
    ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
    volumes:
      []
      # - hostPath:
      #   path: <HOST_PATH>
      #   name: <VOLUME_NAME>

    # -- Specifies additional volumes to mount
    volumeMounts:
      []
      # - name: <VOLUME_NAME>
      #   mountPath: <CONTAINER_PATH>
      #   readOnly: true

    # -- Allows to specify additional containers for the deployment
    additionalContainers: []
    #  - name: extra
    #    image: "busybox"
    #    command: ["bash", "-c"]

    # -- Annotations to add to the pod
    podAnnotations:
      {}
      # container.apparmor.security.beta.kubernetes.io/model-running-service-consumer: runtime/default

    # -- Define pod security context
    podSecurityContext:
      enabled: true
      # fsGroup: 2000

    # -- Define security context that allows you to overwrite the pod-level security context
    securityContext:
      enabled: true
      # privileged: false
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
      # seccompProfile:
      #   type: RuntimeDefault

    # -- Specifies the resources limits and requests
    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    # -- Allow the deployment to be scheduled on selected nodes
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # -- Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    # -- Allow the deployment to schedule using affinity rules
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  persistence:
    # -- Should the PV and PVC be created
    # It is good practice to create volumes once and then reuse them.
    # So set this value to true only when you are deploying the service for the first time.
    # If you are redeploying the service, set this value to false.
    create: true
    # -- Type of the volume that will be used to store the training data
    # Valid values: local, nfs
    type: local
    # -- Storage Class name for PV
    storageClassName: ""
    # -- Storage Capacity for PV
    storageCapacity: 1Gi
    # -- Storage requests for PVC
    storageRequests: 1Gi
    # -- DNS name or IP address of the NFS server
    # This value is used only when type is set to nfs
    nfsServer:
    # -- Directory from the host machine that will be mounted to the container for training data
    # This value is used only when type is set to local
    hostPath:
    # -- Node on which the PV will be created
    # This value is used only when type is set to local
    localNodeName:
