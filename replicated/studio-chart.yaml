apiVersion: kots.io/v1beta2
kind: HelmChart
metadata:
  name: studio
spec:
  # chart identifies a matching chart from a .tgz
  chart:
    name: studio
    chartVersion: 2.0.13

  releaseName: studio
  namespace: studio
  # NOTE: little bit room so kafka can go first
  weight: 15

  # values are used in the customer environment, as a pre-render step
  # these values will be supplied to helm template
  values:
    repository: '{{repl ConfigOption "studio_repository" }}'
    tag: '{{repl ConfigOption "studio_image_tag" }}'

    replicated:
      enabled: true
      images:
        replicated-sdk: '{{repl HasLocalRegistry | ternary LocalRegistryHost "registry.rasa.com" }}/{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/europe-west3-docker.pkg.dev/rasa-releases/dependencies" ) }}/replicated-sdk:{{repl ConfigOption "replicated_sdk_image_tag" }}'
      imagePullSecrets:
        - name: '{{repl ImagePullSecretName }}'
      isAirgap: repl{{ HasLocalRegistry }}

    config:
      # -- Defines the host name for all the Studio ingress resources. Make sure you provide a valid host name.
      ingressHost: '{{repl ConfigOption "ingress_hostname" }}'
      ingressAnnotations:
        nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
      # -- Define if you will be using https or http with the ingressHost
      connectionType: '{{repl ConfigOption "connection_type" }}'
      # -- The postgres database instance details for Studio to connect to.
      database:
        # -- The database host name
        host: '{{repl ConfigOption "database_host" }}'
        # -- The database port
        port: '{{repl ConfigOption "database_port" }}'
        # -- The database username
        username: '{{repl ConfigOption "database_username" }}'
        # -- The database password
        password:
          secretName: "studio-secrets"
          secretKey: "DATABASE_PASSWORD"
        # -- Set to true if you want to use SSL for db connection
        preferSSL: '{{repl ConfigOption "prefer_ssl" }}'
        # If true the server will reject db connection which is not present list of supplied CAs.
        rejectUnauthorized: '{{repl ConfigOption "reject_unauthorized" }}'
        # -- The database name for keycloak user management service
        keycloakDatabaseName: '{{repl ConfigOption "keycloak_database" }}'
      keycloak:
        # -- The admin username for Keycloak. This username is used to login to Keycloak admin console.
        adminUsername: '{{repl ConfigOption "keycloak_admin_username" }}'
        # -- The admin password for Keycloak. This password is used to login to Keycloak admin console.
        adminPassword:
          secretName: "studio-secrets"
          secretKey: "KEYCLOAK_ADMIN_PASSWORD"

    backend:
      environmentVariables:
        DATABASE_URL:
          secret:
            name: "studio-secrets"
            value: "DATABASE_URL"
        KEYCLOAK_REALM:
          value: '{{repl ConfigOption "keycloak_realm" }}'
        KEYCLOAK_API_CLIENT_ID:
          value: '{{repl ConfigOption "keycloak_api_client_id" }}'
        KEYCLOAK_API_USERNAME:
          value: '{{repl ConfigOption "keycloak_api_username" }}'
        KEYCLOAK_API_PASSWORD:
          secret:
            name: "studio-secrets"
            key: "KEYCLOAK_API_PASSWORD"
        KEYCLOAK_CLIENT_ID:
          value: '{{repl ConfigOption "keycloak_client_id" }}'
      migration:
        waitForIt: repl{{ eq (ConfigOption "wait_for_it") "1"}}
        waitFotItContainer:
          image: '{{repl HasLocalRegistry | ternary LocalRegistryHost "registry.rasa.com" }}/{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/europe-west3-docker.pkg.dev/rasa-releases/dependencies" ) }}/postgresql:{{repl ConfigOption "postgresql_image_tag" }}'
      ingress:
        className: nginx
        additionalAnnotations:
          kots.io/placeholder: |-
            repl{{ if ConfigOptionNotEquals "annotations" ""}}repl{{ ConfigOption "annotations" | nindent 10 }}repl{{ end }}

    webClient:
      environmentVariables:
        # -- Keycloak realm name
        KEYCLOAK_REALM: '{{repl ConfigOption "keycloak_realm" }}'
        # -- Keycloak client id
        KEYCLOAK_CLIENT_ID: '{{repl ConfigOption "keycloak_client_id" }}'
      ingress:
        className: nginx
        additionalAnnotations:
          kots.io/placeholder: |-
            repl{{ if ConfigOptionNotEquals "annotations" ""}}repl{{ ConfigOption "annotations" | nindent 10 }}repl{{ end }}

    eventIngestion:
      environmentVariables:
        DATABASE_URL:
          secret:
            name: "studio-secrets"
            value: "DATABASE_URL"
        KAFKA_SASL_MECHANISM:
          value: '{{repl ConfigOption "kafka_sasl_mechanism" }}'
        KAFKA_SASL_USERNAME:
          value: '{{repl ConfigOption "kafka_username" }}'
        KAFKA_SASL_PASSWORD:
          value: '{{repl ConfigOption "kafka_password" }}'
        KAFKA_BROKER_ADDRESS:
          value: '{{repl ConfigOption "kafka_broker" }}'
        KAFKA_GROUP_ID:
          value: '{{repl ConfigOption "kafka_group_id" }}'
        # -- Kafka topic to which to Rasa Pro assistant will publish events. Make sure that you pre-create these on your own.
        KAFKA_TOPIC:
          value: '{{repl ConfigOption "kafka_topic" }}'
        # -- Kafka topic to which unprocessed Rasa Pro assistant events will be pushed by Studio. Make sure that you pre-create these on your own.
        KAFKA_DLQ_TOPIC:
          value: '{{repl ConfigOption "kafka_dlq_topic" }}'
        KAFKA_ENABLE_SSL:
          value: '{{repl ConfigOption "kafka_ssl" }}'
        # -- Set to true if you want to use SSL with custom certs
        KAFKA_CUSTOM_SSL:
          value: '{{repl ConfigOption "kafka_custom_ssl" }}'
        # -- Path to the CA file
        KAFKA_CA_FILE:
          value: '{{repl ConfigOption "kafka_ca_file" }}'
        # -- Path to the client key file
        KAFKA_KEY_FILE:
          value: '{{repl ConfigOption "kafka_key_file" }}'
        # -- Path to the client certificate file
        KAFKA_CERT_FILE:
          value: '{{repl ConfigOption "kafka_cert_file" }}'
        # -- Defaults to true, the server certificate is verified against the list of supplied CA
        KAFKA_REJECT_UNAUTHORIZED:
          value: '{{repl ConfigOption "kafka_reject_unauthorized" }}'
        # -- Instructs the application to allow untrusted certificates. Set this to 0 if using untrusted certificates for Kafka.
        NODE_TLS_REJECT_UNAUTHORIZED:
          value: '{{repl ConfigOption "node_tls_reject_unauthorized" }}'

    keycloak:
      environmentVariables:
        KC_PROXY:
          value: '{{repl ConfigOption "keycloak_proxy" }}'
      ingress:
        className: nginx
        additionalAnnotations:
          kots.io/placeholder: |-
            repl{{ if ConfigOptionNotEquals "annotations" ""}}repl{{ ConfigOption "annotations" | nindent 10 }}repl{{ end }}

    rasa:
      enabled: true
      fullnameOverride: rasapro

      rasa:
        replicaCount: 1
        image:
          repository: '{{repl ConfigOption "rasa_pro_repository" }}'
          tag: '{{repl ConfigOption "rasa_pro_image_tag" }}'

        settings:
          useDefaultArgs: false
          mountDefaultConfigmap: false

        command: ["python", "-m", "rasa.model_service"]

        overrideEnv:
          - name: "RASA_PRO_LICENSE"
            valueFrom:
              secretKeyRef:
                name: "studio-secrets"
                key: "RASA_PRO_LICENCE"
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: "studio-secrets"
                key: "OPENAI_API_KEY_SECRET_KEY"
          - name: MAX_PARALLEL_BOT_RUNS
            value: '{{repl ConfigOption "max_parallel_bot_runs" }}'
          - name: MAX_PARALLEL_TRAININGS
            value: '{{repl ConfigOption "max_parallel_trainings" }}'

        envFrom:
          - configMapRef:
              name: shared-environment

        service:
          port: 80
          targetPort: 8000

        livenessProbe:
          enabled: true
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: 6

        readinessProbe:
          enabled: true
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: 6

        ingress:
          enabled: true
          className: nginx
          annotations:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
            nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
            kots.io/placeholder: |-
              repl{{ if ConfigOptionNotEquals "annotations" ""}}repl{{ ConfigOption "annotations" | nindent 12 }}repl{{ end }}
          hosts:
            # -- Please update the below URL with the correct host name of the Studio deployment
            - host: '{{repl ConfigOption "ingress_hostname" }}'
              paths:
                - path: /talk
                  pathType: Prefix

        persistence:
          create: true
          storageCapacity: 1Gi
          storageRequests: 1Gi
          storageClassName: openebs-hostpath
          hostPath:
            enabled: true
            path: "/app/working-data"

        podSecurityContext:
          # -- User ID of the container to access the mounted volume
          fsGroup: 1001
          runAsUser: 0

        # -- rasa.resources specifies the resources limits and requests
        resources: {}
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      rasaProServices:
        enabled: false

  optionalValues:
    - when: '{{repl ConfigOptionEquals "image_registry" "internal_registry"}}'
      recursiveMerge: true
      values:
        imagePullSecrets:
          - name: '{{repl ImagePullSecretName }}'
    - when: '{{repl ConfigOptionEquals "image_registry" "external_registry"}}'
      recursiveMerge: true
      values:
        imagePullSecrets:
          - name: '{{repl ConfigOption "image_pull_secrets" }}'
    - when: '{{repl ConfigOptionEquals "image_registry" "internal_registry"}}'
      recursiveMerge: true
      values:
        rasa:
          imagePullSecrets:
            - name: '{{repl ImagePullSecretName }}'
    - when: '{{repl ConfigOptionEquals "image_registry" "external_registry"}}'
      recursiveMerge: true
      values:
        rasa:
          imagePullSecrets:
            - name: '{{repl ConfigOption "image_pull_secrets" }}'
    - when: '{{repl ConfigOptionEquals "set_backend_resources" "1"}}'
      recursiveMerge: true
      values:
        backend:
          resources:
            limits:
              cpu: '{{repl ConfigOption "set_backend_limits_cpu" }}'
              memory: '{{repl ConfigOption "set_backend_limits_memory" }}'
            requests:
              cpu: '{{repl ConfigOption "set_backend_requests_cpu" }}'
              memory: '{{repl ConfigOption "set_backend_requests_memory" }}'
    - when: '{{repl ConfigOptionEquals "set_webclient_resources" "1"}}'
      recursiveMerge: true
      values:
        webClient:
          resources:
            limits:
              cpu: '{{repl ConfigOption "set_webclient_limits_cpu" }}'
              memory: '{{repl ConfigOption "set_webclient_limits_memory" }}'
            requests:
              cpu: '{{repl ConfigOption "set_webclient_requests_cpu" }}'
              memory: '{{repl ConfigOption "set_webclient_requests_memory" }}'
    - when: '{{repl ConfigOptionEquals "set_eventingestion_resources" "1"}}'
      recursiveMerge: true
      values:
        eventIngestion:
          resources:
            limits:
              cpu: '{{repl ConfigOption "set_eventingestion_limits_cpu" }}'
              memory: '{{repl ConfigOption "set_eventingestion_limits_memory" }}'
            requests:
              cpu: '{{repl ConfigOption "set_eventingestion_requests_cpu" }}'
              memory: '{{repl ConfigOption "set_eventingestion_requests_memory" }}'
    - when: '{{repl ConfigOptionEquals "set_keycloak_resources" "1"}}'
      recursiveMerge: true
      values:
        keycloak:
          resources:
            limits:
              cpu: '{{repl ConfigOption "set_keycloak_limits_cpu" }}'
              memory: '{{repl ConfigOption "set_keycloak_limits_memory" }}'
            requests:
              cpu: '{{repl ConfigOption "set_keycloak_requests_cpu" }}'
              memory: '{{repl ConfigOption "set_keycloak_requests_memory" }}'

  builder:
    replicated:
      enabled: true
