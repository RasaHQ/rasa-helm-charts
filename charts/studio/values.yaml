# Default values for studio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

############################
# THIS IS WORK IN PROGRESS #
############################

# -- (string) Override name of app
nameOverride: ""
# -- (string) Override the full qualified app name
fullnameOverride: ""

# -- imagePullSecret defines repository pull secrets
imagePullSecrets:
  []
  # - name: regcred

# -- repository specifies image repository for Studio
repository: "europe-west3-docker.pkg.dev/rasa-releases/studio/"
# -- tag specifies image tag for Studio
## Overrides the image tag whose default is the chart appVersion.
tag: "1.12.2"

config:
  # -- Defines the host name for all the Studio ingress resources.
  # -- This value is used as an anchor (&dns_hostname) for referencing the host name across multiple places in the Helm chart.
  # -- WARNING: Do NOT delete or modify the anchor (&dns_hostname) as it is critical for the proper functioning of the chart.
  # -- If you need to update the host name, only change the value (INGRESS.HOST.NAME), keeping the anchor intact.
  ingressHost: &dns_hostname INGRESS.HOST.NAME
  # -- Define the ingress annotations to be used for ALL the ingress resources.
  ingressAnnotations: {}
  # -- Define if you will be using https or http with the ingressHost
  connectionType: "http"
  # -- The postgres database instance details for Studio to connect to.
  database:
    # -- The database host name
    host: ""
    # -- The database port
    port: "5432"
    # -- The database username
    username: ""
    # -- The database password
    password:
      secretName: "studio-secrets"
      secretKey: "DATABASE_PASSWORD"
    # -- Set to true if you want to use SSL for db connection
    preferSSL: "true"
    # If true the server will reject db connection which is not present list of supplied CAs.
    rejectUnauthorized: ""
    # -- The database name for keycloak user management service
    keycloakDatabaseName: "keycloak"
  keycloak:
    # -- config.keycloak.url allows to override the default service endpoint; format is `http(s)://<ingressHost>/auth`. Required only if your cluster redirects internal HTTP traffic to HTTPS
    url: ""
    # -- The admin username for Keycloak. This username is used to login to Keycloak admin console.
    adminUsername: "kcadmin"
    # -- The admin password for Keycloak. This password is used to login to Keycloak admin console.
    adminPassword:
      secretName: "studio-secrets"
      secretKey: "KEYCLOAK_ADMIN_PASSWORD"

# Studio Backend component specific configuration
backend:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-backend"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- backend.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- The URL of the database to connect to in the format postgresql://${database.username}:${database.password}@${database.host}:${database.port}/studio?schema=public
    DATABASE_URL:
      secret:
        name: "studio-secrets"
        key: "DATABASE_URL"
    KEYCLOAK_REALM:
      value: "rasa-studio"
    KEYCLOAK_API_CLIENT_ID:
      value: "admin-cli"
    # -- These credentials are used by Studio Backend Server to communicate with Keycloak’s user management module
    KEYCLOAK_API_USERNAME:
      value: "realmadmin"
    # -- These credentials are used by Studio Backend Server to communicate with Keycloak’s user management module
    KEYCLOAK_API_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KEYCLOAK_API_PASSWORD"
    # -- DELETE_CONVERSATIONS_OLDER_THAN_HOURS defines how often you want to run the cron job to delete
    # -- older conversation data from Studio database. The value should be in hours. The cron job won't
    # -- run if the "DELETE_CONVERSATIONS_OLDER_THAN_HOURS" value is left undefined.
    DELETE_CONVERSATIONS_OLDER_THAN_HOURS:
      value: ""
    # -- DELETE_CONVERSATIONS_CRON_EXPRESSION defines the cron schedule for the cron job to delete older
    # -- conversation data from Studio database. The value should be in the cron format. Default value is hourly
    # -- https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
    #  ┌───────────── minute (0 - 59)
    # | ┌───────────── hour (0 - 23)
    # │ │ ┌───────────── day of the month (1 - 31)
    # │ │ │ ┌───────────── month (1 - 12)
    # │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
    # │ │ │ │ │
    # │ │ │ │ │
    # │ │ │ │ │
    # * * * * *
    DELETE_CONVERSATIONS_CRON_EXPRESSION:
      value: "0 * * * *"

  # -- backend.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- backend.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- backend.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-backend: runtime/default

  # -- backend.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- backend.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
      # add: ['NET_BIND_SERVICE', 'NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 4000

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /api/health
      port: 4000
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /api/health
      port: 4000
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Define Studio Database Migration job settings
  migration:
    # -- migration.enable specifies whether a database migration job should be created
    enabled: true
    # -- migration.image specifies which image database migration job should use
    image:
      # -- image.name specifies the repository of the image
      name: "studio-database-migration"
      # -- image.pullPolicy specifies image pull policy
      pullPolicy: IfNotPresent

    waitForIt: false
    waitFotItContainer:
      image: postgres:17.2

    # -- migration.nodeSelector allows the deployment to be scheduled on selected nodes
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # -- migration.tolerations defines tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    # -- migration.affinity allows the deployment to schedule using affinity rules
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    additionalAnnotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- backend.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- backend.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- backend.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- backend.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- backend.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Web Client component specific configuration
webClient:
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-web-client"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- webClient.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- Keycloak realm name
    KEYCLOAK_REALM: "rasa-studio"
    # -- Keycloak client id
    KEYCLOAK_CLIENT_ID: "rasa-studio-backend"

  # -- webClient.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- webClient.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- webClient.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-web-client: runtime/default

  # -- webClient.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- webClient.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
      # add: ['NET_BIND_SERVICE', 'NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 8080

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    additionalAnnotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- webClient.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- webClient.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- webClient.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- webClient.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Event Ingestion component specific configuration
eventIngestion:
  # -- eventIngestion.enabled specifies whether the event ingestion component should be deployed or not
  enabled: true
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name:
      "studio-event-ingestion"
      # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- eventIngestion.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # -- The URL of the database to connect to in the format postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public. This should be same as the one defined for backend.
    DATABASE_URL:
      secret:
        name: "studio-secrets"
        key: "DATABASE_URL"
    # -- Set to true if you want to use SSL
    KAFKA_ENABLE_SSL:
      value: ""
    # -- Set to true if you want to use SSL with custom certs
    KAFKA_CUSTOM_SSL:
      value: ""
    # -- Path to the CA file
    KAFKA_CA_FILE:
      value: ""
    # -- Path to the client key file
    KAFKA_KEY_FILE:
      value: ""
    # -- Path to the client certificate file
    KAFKA_CERT_FILE:
      value: ""
    # -- Defaults to true, the server certificate is verified against the list of supplied CA
    KAFKA_REJECT_UNAUTHORIZED:
      value: ""
    # -- Instructs the application to allow untrusted certificates. Set this to 0 if using untrusted certificates for Kafka.
    NODE_TLS_REJECT_UNAUTHORIZED:
      value: ""
    # -- Supported values are plain, SCRAM-SHA-256 or SCRAM-SHA-512. You can leave it empty if you are not using SASL.
    KAFKA_SASL_MECHANISM:
      value: ""
    KAFKA_SASL_USERNAME:
      value: ""
    KAFKA_SASL_PASSWORD:
      secret:
        name: "studio-secrets"
        key: "KAFKA_SASL_PASSWORD"
    # -- Kafka broker address
    KAFKA_BROKER_ADDRESS:
      value: ""
    # -- Kafka topic to which to Rasa Pro assistant will publish events. Make sure that you pre-create these on your own.
    KAFKA_TOPIC:
      value: "rasa-events"
    # -- Kafka topic to which unprocessed Rasa Pro assistant events will be pushed by Studio. Make sure that you pre-create these on your own.
    KAFKA_DLQ_TOPIC:
      value: "rasa-events-dlq"
    # -- This is the Kafka group id that should be unique for Studio so that Studio can receive a copy of all the Rasa Pro events streamed to the topic.
    KAFKA_GROUP_ID:
      value: "studio"

  # -- eventIngestion.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- eventIngestion.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- eventIngestion.volumes specify additional volumes for the Studio event ingestion container
  ## Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  volumes:
    []
    # - hostPath:
    #   path: <HOST_PATH>
    #   name: <VOLUME_NAME>

  # -- eventIngestion.volumeMounts specifies additional volumes to mount in the Studio event ingestion container
  volumeMounts:
    []
    # - name: <VOLUME_NAME>
    #   mountPath: <CONTAINER_PATH>
    #   readOnly: true

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- eventIngestion.podAnnotations defines to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-event-ingestion: runtime/default

  # -- eventIngestion.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- eventIngestion.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
      # add: ['NET_BIND_SERVICE', 'NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- eventIngestion.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- eventIngestion.autoscaling specifies the HPA settings
  autoscaling:
    # -- autoscaling.enabled specifies whether autoscaling should be enabled
    enabled: false
    # -- autoscaling.minReplicas specifies the minimum number of replicas
    minReplicas: 1
    # -- autoscaling.maxReplicas specifies the maximum number of replicas
    maxReplicas: 100
    # -- autoscaling.targetCPUUtilizationPercentage specifies the target CPU/Memory utilization percentage
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- eventIngestion.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- eventIngestion.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- eventIngestion.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Studio Keycloak component specific configuration
keycloak:
  # -- keycloak.enabled specifies whether Keycloak should be deployed or not
  enabled: true
  # -- replicaCount specifies number of replicas
  replicaCount: 1
  # -- Define image settings
  image:
    # -- image.name specifies image repository
    name: "studio-keycloak"
    # -- image.pullPolicy specifies image pull policy
    pullPolicy: IfNotPresent

  # -- keycloak.environmentVariables defines environment variables for deployment
  # Example: Specify the string value for variables
  #   value: my-value
  # Example: Specify the value for variables sourced from a Secret.
  #   secret:
  #     name: my-secret
  #     key: my-secret-key
  # NOTE: Helm will return an error if environment variable does not have `value` or `secret` provided.
  environmentVariables:
    # Set value to edge to enable communication through HTTP between the proxy/load balancer and Keycloak. Useful for highly secure internal network where the reverse proxy keeps a secure connection (HTTP over TLS) with clients while communicating with Keycloak using HTTP.
    KC_PROXY:
      value: "edge"

  # -- keycloak.envFrom is used to add environment variables from ConfigMap or Secret
  envFrom:
    []
    # - configMapRef:
    #     name: my-configmap

  # -- keycloak.additionalContainers allows to specify additional containers for the deployment
  additionalContainers: []
  #  - name: extra
  #    image: "busybox"
  #    command: ["bash", "-c"]

  # -- Define service account
  serviceAccount:
    # -- serviceAccount.create specifies whether a service account should be created
    create: false
    # -- serviceAccount.annotations defines annotations to add to the service account
    annotations: {}
    # -- serviceAccount.name defines the name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- keycloak.podAnnotations defines annotations to add to the pod
  podAnnotations:
    {}
    # container.apparmor.security.beta.kubernetes.io/studio-keycloak: runtime/default

  # -- keycloak.podSecurityContext defines pod security context
  podSecurityContext:
    enabled: true
    # fsGroup: 2000

  # -- keycloak.securityContext defines security context that allows you to overwrite the pod-level security context
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
      # add: ['NET_BIND_SERVICE', 'NET_RAW']
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsUser: 1000
    # seccompProfile:
    #   type: RuntimeDefault

  # -- Define service
  service:
    # -- service.type specifies service type
    type: ClusterIP
    # -- service.port specifies service port
    port: 80
    # -- service.targetPort specifies service target port
    targetPort: 8080

  # -- Override default liveness probe settings
  livenessProbe:
    enabled: true
    httpGet:
      path: /auth
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Override default readiness probe settings
  readinessProbe:
    enabled: true
    httpGet:
      path: /auth
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 6

  # -- Configure the ingress resource that allows you to access the deployment installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ingress:
    # -- ingress.enabled specifies whether an ingress service should be created
    enabled: true
    # -- ingress.className specifies the ingress className to be used
    className: ""
    # -- ingress.labels defines labels to add to the ingress
    labels: {}
    # -- ingress.annotations defines annotations to add to the ingress
    additionalAnnotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- ingress.tls spefices the TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- keycloak.resources specifies the resources limits and requests
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi

  # -- keycloak.nodeSelector allows the deployment to be scheduled on selected nodes
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- keycloak.tolerations defines tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- keycloak.affinity allows the deployment to schedule using affinity rules
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

# Network policy settings
networkPolicy:
  # -- networkPolicy.enabled specifies whether to enable network policies
  enabled: false
  # -- networkPolicy.denyAll defines whether to apply denyAll network policy
  denyAll: false
  # -- networkPolicy.nodeCIDR allows for traffic from a given CIDR - it's required in order to make kubelet able to run live and readiness probes
  nodeCIDR: []
  #  - ipBlock:
  #      cidr: 0.0.0.0/0

global:
  # -- global.additionalDeploymentLabels can be used to map organizational structures onto system objects
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  additionalDeploymentLabels: {}
  ingressHost:

# -- Controls whether the pod may use the node network namespace
hostNetwork: false

# -- dnsPolicy specifies Pod's DNS policy
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
dnsPolicy: ""

# -- dnsConfig specifies Pod's DNS condig
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig:
  {}
  # options:
  # - name: ndots
  #   value: "1"

# -- deploymentAnnotations defines annotations to add to all Studio deployments
deploymentAnnotations:
  {}
  #  key: "value"

# -- deploymentLabels defines labels to add to all Studio deployment
deploymentLabels: {}

# -- podLabels defines labels to add to all Studio pod(s)
podLabels: {}

replicated:
  enabled: false
  sdkVersion: "1.5.2"

# -- Define the resources for the Rasa Pro model server
rasa:
  enabled: true
  fullnameOverride: rasapro

  rasa:
    replicaCount: 1
    image:
      repository: europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pro
      tag: "3.12.6-latest"

    strategy:
      type: Recreate

    settings:
      useDefaultArgs: false
      mountDefaultConfigmap: false

    command: ["python", "-m", "rasa.model_service"]

    overrideEnv:
      - name: "RASA_PRO_LICENSE"
        valueFrom:
          secretKeyRef:
            name: "studio-secrets"
            key: "RASA_PRO_LICENSE_SECRET_KEY"
      - name: OPENAI_API_KEY
        valueFrom:
          secretKeyRef:
            name: "studio-secrets"
            key: "OPENAI_API_KEY_SECRET_KEY"

    envFrom:
      - configMapRef:
          name: shared-environment

    service:
      port: 80
      targetPort: 8000

    livenessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    readinessProbe:
      enabled: true
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
      failureThreshold: 6

    ingress:
      enabled: true
      annotations: {}
      hosts:
        # -- Please update the below URL with the correct host name of the Studio deployment
        - host: *dns_hostname
          paths:
            - path: /talk
              pathType: Prefix

    persistence:
      create: true
      storageCapacity: 1Gi
      storageRequests: 1Gi
      # -- Make sure to set the correct storage class name based on your cluster configuration
      storageClassName:
      hostPath:
        enabled: false

    podSecurityContext:
      # -- User ID of the container to access the mounted volume
      fsGroup: 1001

    # -- rasa.resources specifies the resources limits and requests
    resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  rasaProServices:
    enabled: false
