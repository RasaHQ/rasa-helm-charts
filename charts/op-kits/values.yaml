# Default values for op-kits.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- (string) Override name of app
nameOverride: ""
# -- (string) Override the full qualified app name
fullnameOverride: ""

# Global settings
global:
  # -- (string) Global namespace override. If empty, uses release namespace
  namespace: ""

# CloudNativePG Configuration
cloudnativepg:
  # -- Enable CloudNativePG cluster deployment
  enabled: true

  # -- Set to true to install the CloudNativePG operator via Helm dependency
  operator:
    enabled: false
    # -- Namespace where the CloudNativePG operator will be installed
    # When enabled, the operator should be installed in this dedicated namespace
    namespace: "cnpg-system"

  cluster:
    # -- (string) Override cluster name. If empty, uses "{{ release-name }}-pg"
    nameOverride: ""
    # -- Number of PostgreSQL instances in the cluster
    instances: 1
    # -- PostgreSQL container image to use
    imageName: "ghcr.io/cloudnative-pg/postgresql:16"

    # Storage configuration for PostgreSQL
    storage:
      # -- Storage size for PostgreSQL data
      size: "20Gi"
      # -- Storage class name. Change to your storage class
      storageClass: "gp2"

    # -- Enable superuser access (creates <cluster>-superuser secret)
    enableSuperuserAccess: true

    # Bootstrap configuration for initial database setup
    bootstrap:
      initdb:
        # -- Database name to create during initialization
        database: "app"
        # -- Database owner/user to create during initialization
        owner: "appuser"

    # Monitoring configuration
    monitoring:
      # -- Enable Prometheus PodMonitor for metrics collection
      enablePodMonitor: false

    # -- Additional PostgreSQL configuration parameters
    # Example:
    # postgresql:
    #   parameters:
    #     max_connections: "200"
    #     shared_buffers: "256MB"
    postgresql:
      parameters: {}

    # -- Resource limits and requests for PostgreSQL containers
    # Example:
    # resources:
    #   limits:
    #     cpu: "1"
    #     memory: "1Gi"
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    resources: {}

# Strimzi Kafka Configuration
strimzi:
  # -- Enable Strimzi Kafka cluster deployment
  enabled: true

  # -- Set to true to install the Strimzi Kafka operator via Helm dependency
  operator:
    enabled: false
    # -- Namespace where the Strimzi Kafka operator will be installed
    # When enabled, the operator should be installed in this dedicated namespace
    namespace: "strimzi-system"

  kafka:
    # -- (string) Override Kafka cluster name. If empty, uses "{{ release-name }}-kafka"
    nameOverride: ""

    # Kafka cluster annotations for operator configuration
    annotations:
      kraft:
        # -- Enable KRaft mode (no ZooKeeper required)
        enabled: true
      nodePools:
        # -- Use KafkaNodePool resources for node management
        enabled: true

    # Entity Operator configuration
    entityOperator:
      topicOperator:
        # -- Enable Kafka Topic Operator for topic management
        enabled: true
      userOperator:
        # -- Enable Kafka User Operator for user management
        enabled: true

    # Kafka listeners configuration
    # -- Kafka listeners define how clients connect to the cluster
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: scram-sha-512

    # Kafka broker configuration
    # -- Kafka configuration parameters for brokers
    # With 1 broker, keep replication factors at 1 (increase when scaling out)
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1

    # -- Resource limits and requests for Kafka brokers
    # Example:
    # resources:
    #   limits:
    #     cpu: "1"
    #     memory: "2Gi"
    #   requests:
    #     cpu: "100m"
    #     memory: "512Mi"
    resources: {}

  # Kafka Node Pools Configuration
  nodePools:
    # Controller node pool configuration
    controllers:
      # -- Enable controller node pool deployment
      enabled: true
      # -- Number of controller replicas
      replicas: 1
      # -- Node pool roles for controllers
      roles: ["controller"]

      # Storage configuration for controllers
      storage:
        # -- Storage type for controller nodes
        type: "persistent-claim"
        # -- Storage size for controller nodes
        size: "20Gi"
        # -- Storage class for controller nodes
        class: "gp2"
        # -- Whether to delete PVC when node pool is deleted
        deleteClaim: false

      # -- Resource limits and requests for controller nodes
      # Example:
      # resources:
      #   limits:
      #     cpu: "500m"
      #     memory: "1Gi"
      #   requests:
      #     cpu: "100m"
      #     memory: "256Mi"
      resources: {}

    # Broker node pool configuration
    brokers:
      # -- Enable broker node pool deployment
      enabled: true
      # -- Number of broker replicas
      replicas: 1
      # -- Node pool roles for brokers
      roles: ["broker"]

      # Storage configuration for brokers
      storage:
        # -- Storage type for broker nodes (JBOD allows multiple volumes)
        type: "jbod"
        # -- Storage volumes configuration for brokers
        volumes:
          - id: 0
            type: "persistent-claim"
            size: "100Gi"
            class: "gp2"
            deleteClaim: false

      # -- Resource limits and requests for broker nodes
      # Example:
      # resources:
      #   limits:
      #     cpu: "1"
      #     memory: "2Gi"
      #   requests:
      #     cpu: "200m"
      #     memory: "512Mi"
      resources: {}

  # Kafka Topics Configuration
  topics:
    # Main events topic configuration
    events:
      # -- Enable main events topic creation
      enabled: true
      # -- Topic name for main application events
      name: "app-events"
      # -- Number of partitions (adjust for throughput)
      partitions: 6
      # -- Number of replicas (set to 3 when you scale brokers to 3)
      replicas: 1
      # -- Topic configuration parameters
      config:
        retention.ms: 604800000  # 7 days
        cleanup.policy: "delete"

    # Additional topics can be added here
    # Example:
    # customTopic:
    #   enabled: false
    #   name: "custom-topic"
    #   partitions: 3
    #   replicas: 1
    #   config:
    #     retention.ms: 86400000  # 1 day

  # Kafka Users Configuration
  users:
    # Main application user configuration
    app:
      # -- Enable main application user creation
      enabled: true
      # -- Kafka user name for main application
      name: "app-user"

      # Authentication configuration
      authentication:
        # -- Authentication type for Kafka user
        type: "scram-sha-512"
        # -- Password configuration sourced from Kubernetes secret
        password:
          secretName: "app-secrets"
          secretKey: "KAFKA_SASL_PASSWORD"

      # Authorization can be added here
      # Example:
      # authorization:
      #   type: simple
      #   acls:
      #     - resource:
      #         type: topic
      #         name: app-events
      #       operation: Read

    # Additional users can be added here
    # Example:
    # customUser:
    #   enabled: false
    #   name: "custom-user"
    #   authentication:
    #     type: "scram-sha-512"

# Dependency chart configurations
# Configuration values passed to dependency charts when operator.enabled=true

# CloudNativePG operator chart configuration
# Values passed to the cloudnative-pg subchart when cloudnativepg.operator.enabled=true
cloudnative-pg: {}
  # Default configuration for CloudNativePG operator
  # Add any operator-specific configuration here if needed

# Strimzi Kafka operator chart configuration
# Values passed to the strimzi-kafka-operator subchart when strimzi.operator.enabled=true
strimzi-kafka-operator:
  # -- Configure the Strimzi operator to watch all namespaces
  # This allows the operator to manage Kafka resources across all namespaces
  watchAnyNamespace: true

# Common settings applied to all resources
# -- Additional labels to apply to all resources
# Example:
# commonLabels:
#   environment: production
#   team: platform
commonLabels: {}

# -- Additional annotations to apply to all resources
# Example:
# commonAnnotations:
#   monitoring.coreos.com/scrape: "true"
#   prometheus.io/port: "8080"
commonAnnotations: {}

# Pod scheduling configuration for all resources
# -- Node selector for all pods
# Example:
# nodeSelector:
#   kubernetes.io/os: linux
#   node-role.kubernetes.io/worker: "true"
nodeSelector: {}

# -- Tolerations for all pods
# Example:
# tolerations:
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"
# - key: "key2"
#   operator: "Exists"
#   effect: "NoExecute"
tolerations: []

# -- Affinity rules for all pods
# Example:
# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: kubernetes.io/os
#           operator: In
#           values:
#           - linux
#   podAntiAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       podAffinityTerm:
#         labelSelector:
#           matchExpressions:
#           - key: app.kubernetes.io/name
#             operator: In
#             values:
#             - op-kits
#         topologyKey: kubernetes.io/hostname
affinity: {}
